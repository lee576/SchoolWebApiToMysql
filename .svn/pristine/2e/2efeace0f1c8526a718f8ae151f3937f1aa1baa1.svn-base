using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using DbModel;
using IService;
using Microsoft.AspNetCore.Cors;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using RestSharp;
using Models.ViewModels;
using SchoolWebApi.Utility;
using Newtonsoft.Json.Linq;
using Newtonsoft.Json;
using NPOI.SS.UserModel;
using Infrastructure;


namespace SchoolWebApi.Controllers
{
    /// <summary>
    /// 收银台接口
    /// </summary>
    [Route("api/[controller]/[action]")]
    [ApiController]
    [Produces("application/json")]
    [EnableCors("any")]
    public class CashierController : Controller
    {
        private static NLog.Logger Log = NLog.LogManager.GetCurrentClassLogger();
        private Itb_cashier_trade_orderService _tb_cashier_trade_orderService;

        private Itb_cashier_deviceService _tb_cashier_deviceService;

        private Itb_cashier_stallService _tb_cashier_stallService;

        private Itb_cashier_dining_hallService _Itb_cashier_dining_hallService;

        private Itb_payment_accountsService _Itb_payment_accountsService;

        private Itb_school_InfoService _Itb_school_InfoService;
        /// <summary>
        /// 
        /// </summary>
        public CashierController(Itb_cashier_trade_orderService tb_cashier_trade_orderService, Itb_cashier_deviceService tb_cashier_deviceService, Itb_cashier_stallService tb_cashier_stallService, Itb_cashier_dining_hallService tb_cashier_dining_hallService, Itb_payment_accountsService Itb_payment_accountsService, Itb_school_InfoService Itb_school_InfoService)
        {
            _tb_cashier_trade_orderService = tb_cashier_trade_orderService;
            _tb_cashier_deviceService = tb_cashier_deviceService;
            _tb_cashier_stallService = tb_cashier_stallService;
            _Itb_cashier_dining_hallService = tb_cashier_dining_hallService;
            _Itb_payment_accountsService = Itb_payment_accountsService;
            _Itb_school_InfoService = Itb_school_InfoService;
        }

        /// <summary>
        /// 收银台概收款统计
        /// </summary>
        /// <param name="school_id"></param>
        /// <param name="st"></param>
        /// <param name="et"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetCashierOrder(string school_id, string st, string et)
        {
            Getcashier_trade_orderSum obj = _tb_cashier_trade_orderService.Getcashier_trade_order(school_id, st, et);
         

            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                pays = obj.pays,
                ordercount = obj.ordercount,
                array_alldays = obj.array_alldays
            });
        }

        /// <summary>
        /// 数据概览
        /// </summary>
        /// <param name="schoolcode"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetCashierOrderCount(string schoolcode)
        {
            string st = DateTime.Now.ToString("yyyy-MM-dd");
            string et = DateTime.Now.ToString("yyyy-MM-dd");
            Cashier_trade_orderSum obj = _tb_cashier_trade_orderService.Getcashier_trade_orderCount(schoolcode, st, et);

            string lst = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
            string let = DateTime.Now.AddDays(-1).ToString("yyyy-MM-dd");
            Cashier_trade_orderSum obj1 = _tb_cashier_trade_orderService.Getcashier_trade_orderCount(schoolcode, lst, let);


            int count = _tb_cashier_deviceService.FindListByClause(p => p.schoolcode == schoolcode, p => p.id, SqlSugar.OrderByType.Asc).Count();
            return Json(new
            {
                deviceCount = count,
                totalMoney = obj!=null?obj.paysum:0,
                yesterdayMoney = obj1 != null ? obj1.paysum : 0,
                code = "10000",
                msg = "查询成功",

            });
        }

        /// <summary>
        /// 获取档口
        /// </summary>
        /// <param name="school_id"></param>
        /// <param name="diningid"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetStall(string school_id,string diningid)
        {
            var stall= _tb_cashier_stallService.GetStall(school_id, diningid);
        
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                data= stall

            });

        }

        /// <summary>
        /// 获取食堂
        /// </summary>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetDinningHall(string school_id)
        {
            var list= _Itb_cashier_dining_hallService.FindListByClause(p => p.schoolcode == school_id, p => p.id, SqlSugar.OrderByType.Asc);
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                data = list

            });

        }

        /// <summary>
        /// 交易流水查询
        /// </summary>
        /// <param name="dining_hall"></param>
        /// <param name="stall"></param>
        /// <param name="order"></param>
        /// <param name="user_code"></param>
        /// <param name="machine"></param>
        /// <param name="tid"></param>
        /// <param name="stime"></param>
        /// <param name="etime"></param>
        /// <param name="school_id"></param>
        /// <param name="iDisplayStart"></param>
        /// <param name="iDisplayLength"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetFlowing(string dining_hall, string stall, string order, string user_code, string machine, string tid, string stime, string etime, string school_id,int iDisplayStart,int iDisplayLength)
        {

            int pageStart = iDisplayStart;
            int pageSize = iDisplayLength;
            int pageIndex = (pageStart / pageSize) + 1;

            int totalRecordNum = default(int);
            var list = _tb_cashier_trade_orderService.GetFlowing(dining_hall, stall, order, user_code, machine, tid, stime, etime, school_id, pageStart, pageSize,ref totalRecordNum);
          
            return Json(new {
                code = "10000",
                msg = "查询成功",
                iTotalRecords = totalRecordNum,
                data = list
            });


        }

        /// <summary>
        /// 获取总金额
        /// </summary>
        /// <param name="dining_hall"></param>
        /// <param name="stall"></param>
        /// <param name="order"></param>
        /// <param name="user_code"></param>
        /// <param name="machine"></param>
        /// <param name="tid"></param>
        /// <param name="stime"></param>
        /// <param name="etime"></param>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetFlowingSUM(string dining_hall, string stall, string order, string user_code, string machine, string tid, string stime, string etime, string school_id)
        {

            var list = _tb_cashier_trade_orderService.GetFlowingExcel(dining_hall, stall, order, user_code, machine, tid, stime, etime, school_id);
            var school = _Itb_school_InfoService.FindByClause(p => p.School_Code == school_id);
            var pdd = list.Sum(p => p.paid);
            var tk = list.Sum(p => p.refund);
            var  v= (pdd - tk).ToString("#0.00");
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                count = v,
            });


        }


        /// <summary>
        /// 下载交易流水
        /// </summary>
        /// <param name="dining_hall"></param>
        /// <param name="stall"></param>
        /// <param name="order"></param>
        /// <param name="user_code"></param>
        /// <param name="machine"></param>
        /// <param name="tid"></param>
        /// <param name="stime"></param>
        /// <param name="etime"></param>
        /// <param name="school_id"></param>
        [HttpGet]
        public ActionResult GetFlowingExcel(string dining_hall, string stall, string order, string user_code, string machine, string tid, string stime, string etime, string school_id)
        {
            var list = _tb_cashier_trade_orderService.GetFlowingExcel(dining_hall, stall, order, user_code, machine, tid, stime, etime, school_id);
            var school= _Itb_school_InfoService.FindByClause(p => p.School_Code == school_id);
            var  pdd= list.Sum(p => p.paid);
            var tk = list.Sum(p => p.refund);


            string mingxi = "收银台交易流水明细#学校:" + school.School_name + "#订单总数:" + list.Count() + "#付款总金额:" + pdd + "#退款总金额:" + tk + "#收款总金额" + (pdd- tk)
                + "#说明:金额单位均为‘元’#--------------交易流水明细-------------";
          
            return ExcelHelper.ExportAction(@"收银台交易流水明细.xls",
                new List<string> { "支付宝交易号", "支付宝订单号", "创建时间", "完成时间", "交易状态", "所在食堂", "所在档口", "机具SN码", "付款账户", "学工号", "姓名", "订单价格", "实付金额", "退款金额" }, list.ToArray(),
                FillCell, mingxi);

           
            


        }

        private void FillCell(IRow row, Cashier_trade_FlowingExcel[] list, int i)
        {
          
            row.CreateCell(0).SetCellValue(list[i].alipay_order);
            row.CreateCell(1).SetCellValue(list[i].order);
            try
            {
                row.CreateCell(2).SetCellValue(DateTime.Parse(list[i].create_time + "").ToString("yyyy-MM-dd HH:mm:ss"));
            }
            catch (Exception)
            {
                row.CreateCell(2).SetCellValue("");
            }

            try
            {
                row.CreateCell(3).SetCellValue(DateTime.Parse(list[i].finish_time + "").ToString("yyyy-MM-dd HH:mm:ss"));
            }
            catch (Exception)
            {
                row.CreateCell(3).SetCellValue("");
            }

            row.CreateCell(4).SetCellValue("已完成");
            row.CreateCell(5).SetCellValue(list[i].dining_name);
            row.CreateCell(6).SetCellValue(list[i].stall_name);

            row.CreateCell(7).SetCellValue(list[i].sn);
            row.CreateCell(8).SetCellValue(list[i].payer_account);
            row.CreateCell(9).SetCellValue(list[i].user_code);

            row.CreateCell(10).SetCellValue(list[i].name);
            row.CreateCell(11).SetCellValue(list[i].paid);
            row.CreateCell(12).SetCellValue(list[i].pay_amount);
            row.CreateCell(13).SetCellValue(list[i].refund);
        }


        /// <summary>
        /// 获取收款账号
        /// </summary>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetPayment_accounts(string school_id)
        {
           var list= _Itb_payment_accountsService.FindListByClause(p => p.schoolcode == school_id, p => p.id, SqlSugar.OrderByType.Asc);
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                data = list
            });
        }

        /// <summary>
        /// 对账单下载
        /// </summary>
        /// <param name="timeType"></param>
        /// <param name="datetime"></param>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetBillExcel(string timeType, string datetime, string school_id,string payment_accounts)
        {

            var list = _tb_cashier_trade_orderService.GetBillExcel(timeType, datetime, school_id);
            return Json(new
            {
                code = "10000",
                msg = "下载成功",
                data = list
            });


        }

        /// <summary>
        /// 资金管理汇总
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetTotalt(string stime, string etime, string school_id, string dining_hall, string stall)
        {

            var list = _tb_cashier_trade_orderService.getTotalt(stime, etime, school_id, dining_hall, stall);

            
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                data = list
            });

        }


        /// <summary>
        /// 资金管理详情
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetorderDetail(string dining_hall, string stall, string stime, string etime, string school_id, int iDisplayStart, int iDisplayLength)

        {
            int pageStart = iDisplayStart;
            int pageSize = iDisplayLength;
            int pageIndex = (pageStart / pageSize) + 1;

            int totalRecordNum = default(int);

            var list = _tb_cashier_trade_orderService.getCapitalList(dining_hall, stall, stime, etime, school_id, pageStart, pageSize, ref totalRecordNum);
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                iTotalRecords = totalRecordNum,
                data = list
            });
        }

        /// <summary>
        /// 资金管理详情导出
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetGetorderDetailExcel(string dining_hall, string stall, string stime, string etime, string school_id)
        {

            var list = _tb_cashier_trade_orderService.getCapitalListexcel(dining_hall, stall, stime, etime, school_id);
            var school = _Itb_school_InfoService.FindByClause(p => p.School_Code == school_id);
            var count = list.Sum(p => p.totalNum);
            var tkcount = list.Sum(p => p.totalRefundCount);
            var tk = list.Sum(p => p.totalRefund);
            var skje = list.Sum(p => p.totalOrderPrice);
            var tkzje = list.Sum(p => p.totalPrice);


            string mingxi = "资金管理#学校:" + school.School_name + "#交易订单笔数:" + count + "#退款订单笔数:" + tkcount + "#收款总金额" + skje + "#退款总金额:" + tk + "#净收入"+ tkzje + ""
             + "#说明:金额单位均为‘元’#--------------资金管理-------------";

            return ExcelHelper.ExportAction(@"资金管理.xls",
                new List<string> { "所在食堂", "所在档口", "交易订单总数", "退款订单总数", "订单总价", "搭伙费", "优惠", "收款总金额", "退款总金额", "净收入"}, list.ToArray(),
                FillCell1, mingxi);
        }



        private void FillCell1(IRow row, Cashier_trade_detil[] list, int i)
        {

            row.CreateCell(0).SetCellValue(list[i].shop);
            row.CreateCell(1).SetCellValue(list[i].stall);
            
            row.CreateCell(2).SetCellValue(list[i].totalNum);
           
            row.CreateCell(3).SetCellValue(list[i].totalRefundCount);
           

            row.CreateCell(4).SetCellValue(list[i].totalPayment);
            row.CreateCell(5).SetCellValue(list[i].totalBoard);
            row.CreateCell(6).SetCellValue(list[i].totalFavorable);

            row.CreateCell(7).SetCellValue(list[i].totalOrderPrice);
            row.CreateCell(8).SetCellValue(list[i].totalRefund);
            row.CreateCell(9).SetCellValue(list[i].totalPrice);
            
        }


        /// <summary>
        /// 获取档口树
        /// </summary>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult GetDininglist(string school_id,string dining_hall)
        {
            
            var top1 = _Itb_school_InfoService.FindByClause(p => p.School_Code == school_id);
            var to2 = _Itb_cashier_dining_hallService.FindListByClause(p => p.schoolcode == school_id, p => p.id, SqlSugar.OrderByType.Asc);
            if(dining_hall!=""&& dining_hall!=null)
            {
                to2= to2.Where(p => p.id == Convert.ToInt32(dining_hall));
            }

            var to3 = _tb_cashier_stallService.GetStallAll(school_id);

            DepartmentTree deptree = new DepartmentTree();
            deptree.id = 0;
            deptree.name = top1.School_name;
            deptree.label = top1.School_name;
            deptree.schoolcode = school_id;
            deptree.treeLever = 0;
            foreach (var item2 in to2)
            {
                DepartmentTree deptree2 = new DepartmentTree();
                deptree2.id = item2.id;
                deptree2.label = item2.name;
                deptree2.name = item2.name;
                deptree2.schoolcode = item2.schoolcode;
                deptree2.treeLever = 1;
                deptree.children.Add(deptree2);
                var top3v = to3.Where(p => p.dining_tall == item2.id);
                foreach (var item in top3v)
                {
                    DepartmentTree deptree3 = new DepartmentTree();
                    deptree3.id = item.id;
                    deptree3.label = item.name;
                    deptree3.name = item.name;
                    deptree3.schoolcode = item2.schoolcode;
                    deptree3.treeLever = 2;
                    deptree2.children.Add(deptree3);
                }
            }

            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                data = deptree,
                defaultProps = new { children = "children", label = "label" },
            });

        }


        /// <summary>
        /// 获取食堂设备
        /// </summary>
        /// <param name="queryparm">查询名字</param>
        /// <param name="sn">编号</param>
        /// <param name="hallid">食堂id</param>
        /// <param name="tallid">档口id</param>
        /// <param name="school_id"></param>
        /// <param name="iDisplayStart"></param>
        /// <param name="iDisplayLength"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Getdevice(string queryparm, string sn, string hallid, string tallid, string school_id, int iDisplayStart, int iDisplayLength)
        {
            int pageStart = iDisplayStart;
            int pageSize = iDisplayLength;
            int pageIndex = (pageStart / pageSize) + 1;
            int totalRecordNum = default(int);
            var list= _tb_cashier_deviceService.Getinfo(queryparm, hallid, tallid, sn,  school_id, pageIndex, pageSize, ref totalRecordNum);
            return Json(new
            {
                code = "10000",
                msg = "查询成功",
                iTotalRecords = totalRecordNum,
                aaData = list
            });

        }





        /// <summary>
        /// 自动更新食堂结构
        /// </summary>
        [HttpGet]
        public ActionResult GetStallInfo(string school_id)
        {

            var school= _Itb_school_InfoService.FindByClause(p => p.School_Code == school_id);


            if(school==null)
            {
                return Json(new
                {
                    code = "20000",
                    msg = "该学校不存在"
                  
                });
            }

            if(school.xiyunMCode==""|| school.xiyunMCode == null)
            {
                return Json(new
                {
                    code = "20000",
                    msg = "请先设置MID"

                });

            }


            //shoplist = shoplist.Where(p =>p.status == 1).ToList();
            //删除设备
            _tb_cashier_deviceService.Delete(p => p.schoolcode == school_id);
            var din = _Itb_cashier_dining_hallService.FindListByClause(p => p.schoolcode == school_id, p => p.id, SqlSugar.OrderByType.Asc);
            //删除档口
            foreach (var item in din)
            {
                _tb_cashier_stallService.Delete(p => p.dining_tall == item.id);
            }
            //删除食堂
            _Itb_cashier_dining_hallService.Delete(p => p.schoolcode == school_id);

            foreach (string mid in school.xiyunMCode.Split(','))
            {
                string appid = "10000925";
                string url = "https://openapi.xiyun.net/gateway.do";
                string privateKey = "MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAKusBxjLQrHcHopGp0xqNxcSrJpp4dp35obWW+BwdefFFzKoRIwRGzrnUvFDGuoSl3v3zl8Y1MFUNzo+hXjuXeMzs2DO78AAuoYgvfVybY/Fs98FqTR60RboL7dCHZowCi4iHGa0kOSMI4IHrws2iPUGETF+m4wjlcEkYCWMmsmXAgMBAAECgYEApLmj8amQLKQfdeVHwK4mgHA9yMkSm5PzUqy7akffCu72THhjldcQPtwanUAbwkDmtGBa2Ks18vBBMhUt85Ud5kG2Dm8v1KbaCY3/T5GtIGV4vmffUzUn+g7a6TIQDL/DJt7QpoLD3hPY0QFo+CWcHPyV1bxoLR5pQWMhHK7YOXkCQQDnj9tvB6X5IQzoPiBE7cfm+KS5IRYJsi/JqRI0eyPDLEbCNSxik8P9bnGBHNkPqly3M6mtnDFkXqMxK6O9CzwtAkEAvcodYs/s1N5yDTnZ65/sqR3iCvuZNO1jJhPgh5DfdseoX4bOgiFGBwL6glqMVjJu5VLFlWIb3n+yw97V06DDUwJALOeb0RM1n3NGUn9BuLw3yNWs8+2znVu9oqizzBOZIs8iRaUUH2WyWyIgxr32ZfBOnIRbQjyI44LquK1SymU0XQJANbdf69i3ymQPWcj28ea4wADyOnONoFpUBrH3iccqSF8oO6lXB6PNQyzHpF9mevsZQhTUUXyMMMRp32BRmu1UewJAYyb9faJWAANnsE54LPyDOc/3CTxC3ggGDEItZB1zZ6gXD+JvxXwje42IHFJ1CDBYTfikOaq5hFKJ3bDw7doFrg==";
                string sign_type = "RSA";
                string charset = "UTF-8";
                string version = "1.0";
                long timestamp = (DateTime.Now.ToUniversalTime().Ticks - 621355968000000000) / 10000000;
                var client = new RestClient(url);
                var request = new RestRequest();
                request.Method = Method.POST;
                request.AddHeader("Content-Type", "application/json");
                request.Parameters.Clear();

                IDictionary<string, string> paramsMap = new Dictionary<string, string>();

                paramsMap.Add("appid", appid);
                paramsMap.Add("method", "xy.isv.canteen.list");
                paramsMap.Add("charset", charset);
                paramsMap.Add("sign_type", sign_type);
                paramsMap.Add("version", version);
                paramsMap.Add("timestamp", timestamp.ToString());
                var biz_content = new { merchantCode = mid, page = "1", pageSize = "200" };

                paramsMap.Add("biz_content", JsonConvert.SerializeObject(biz_content));

                string singstr = "";

                singstr = RSAHelper.RSASign(paramsMap, privateKey, charset, sign_type);

                //请求字符串
                var reqjson = new
                {
                    charset = charset,
                    biz_content = biz_content,
                    method = "xy.isv.canteen.list",
                    appid = appid,
                    sign_type = sign_type,
                    version = version,
                    timestamp = timestamp.ToString(),//时间戳
                    sign = singstr
                };

                request.AddJsonBody(reqjson);
                string str = JsonConvert.SerializeObject(reqjson);

                var response = client.Execute(request);

                Dictionary<string, Object> user_obj = JsonConvert.DeserializeObject<Dictionary<string, Object>>(response.Content);
                if (user_obj["code"].ToString() == "10000")
                {


                    var biz = JsonConvert.DeserializeObject<Dictionary<string, Object>>(user_obj["biz_content"].ToString());


                    List<xiyunShop> shoplist = JsonConvert.DeserializeObject<List<xiyunShop>>(biz["resultList"].ToString());
                    shoplist = shoplist.Where(p =>p!=null).ToList();
                    

                   

                   

                    var snlist = _tb_cashier_trade_orderService.GetSN(mid);
                   
                    //string bb = "";
                    //string bn = "";
                    //using (var db = DbFactory.GetSqlSugarClient())
                    //{
                    //    db.Ado.ExecuteCommand("delete from abc");
                    //}

                        foreach (var item in shoplist)
                    {

                        //using (var db = DbFactory.GetSqlSugarClient())
                        //{
                          
                        //    db.Ado.ExecuteCommand("insert into abc values('"+item.canteenName+"','"+ item.canteenCode+ "')");

                        //}

                        string dinname = item.org.Substring(item.org.IndexOf(';')+1, item.org.Length- item.org.IndexOf(';')-2);
                        

                                //查找食堂是否存在根据名称
                                var s = _Itb_cashier_dining_hallService.FindByClause(p => p.schoolcode == school_id && p.name == dinname);

                        int stallid = 0;

                        tb_cashier_stall stall = new tb_cashier_stall();
                        if (s == null)
                                {
                                    tb_cashier_dining_hall hall = new tb_cashier_dining_hall();
                                    hall.name = dinname;
                                    hall.introduction = dinname;
                                    hall.schoolcode = school_id;
                                    long id = _Itb_cashier_dining_hallService.Insert(hall);

                                   
                                    stall.dining_tall = (int)id;
                                    stall.name = item.canteenName;
                                    stall.type = 0;
                                    stall.school_card_rate = 100;
                                    stall.student_card_rate = 100;
                                    stall.other_rate = 100;
                                    stall.refund = 0;
                                    stall.payee_account = 1;
                                    stall.subsidy = 0;
                                    stall.refund_password = "";
                                    stallid=(int)_tb_cashier_stallService.Insert(stall);
                                }
                                else
                                {
                                  
                                    stall.dining_tall = s.id;
                                    stall.name = item.canteenName;
                                    stall.type = 0;
                                    stall.school_card_rate = 100;
                                    stall.student_card_rate = 100;
                                    stall.other_rate = 100;
                                    stall.refund = 0;
                                    stall.payee_account = 1;
                                    stall.subsidy = 0;
                                    stall.refund_password = "";
                                    stallid = (int)_tb_cashier_stallService.Insert(stall);
                                }

                        if (snlist.Count()>0&& item!=null)
                        {
                          //  Log.Info(item.canteenName+ "|"+snlist.FirstOrDefault().trade_name);
                        //查到档口名称获取设备号

                        var list = snlist.Where(p =>p.trade_name == item.canteenName);
                           
                                if(list==null)
                                {
                                    if (list.Count() == 0)
                                        continue;
                                }
                               
                            
                            

                         var snl = list.FirstOrDefault();
                            if (snl != null)
                            {
                                if (_tb_cashier_deviceService.FindByClause(p => p.schoolcode == school_id && p.sn == snl.terminal_number) == null)
                                {
                                    tb_cashier_device dv = new tb_cashier_device();
                                    dv.brand = 1;
                                    dv.sn = snl.terminal_number;
                                    dv.stall = stallid;
                                    dv.schoolcode = school_id;
                                    _tb_cashier_deviceService.Insert(dv);
                                }

                            }
                        }
                    }
                }
            }


            

           

            return Json(new
            {
                code = "10000",
                msg = "更新成功"
              
            });



        }



        /// <summary>
        /// 删除食堂设备
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult DelDeldevice(int id)
        {
            object[] ids = { id };
           if(_tb_cashier_deviceService.DeleteByIds(ids))
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.DeleteSuccess
                });

            }
           else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.DeleteFail
                });

            }
        }

        /// <summary>
        /// 删除档口
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Del_stall(int id)
        {

            object[] ids = { id };
            if (_tb_cashier_stallService.DeleteByIds(ids))
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.DeleteSuccess
                });

            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.DeleteFail
                });

            }
        }


        /// <summary>
        /// 删除食堂
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Del_dining_hall(int id)
        {

            object[] ids = { id };
            if (_Itb_cashier_dining_hallService.DeleteByIds(ids))
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.DeleteSuccess
                });

            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.DeleteFail
                });

            }
        }





        /// <summary>
        /// 新增食堂
        /// </summary>
        /// <param name="name"></param>
        /// <param name="introduction"></param>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Add_dining_hall(string name,string introduction, string school_id)
        {
            tb_cashier_dining_hall hall = new tb_cashier_dining_hall();
            hall.name = name;
            hall.introduction = introduction;
            hall.schoolcode = school_id;
            long id = _Itb_cashier_dining_hallService.Insert(hall);
            if ( id> 0)
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.AddSuccess,
                    id = id

                });
            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.AddFail

                });
            }
        }



        /// <summary>
        /// 新增档口
        /// </summary>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="dining_hall_id"></param>
        /// <param name="school_card_rate"></param>
        /// <param name="student_card_rate"></param>
        /// <param name="other_rate"></param>
        /// <param name="refund"></param>
        /// <param name="payee_account"></param>
        /// <param name="subsidy"></param>
        /// <param name="refundpassword"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Add_stall(string name,int type, int dining_hall_id,int school_card_rate, int student_card_rate,int other_rate,int refund,int payee_account,int subsidy,string refundpassword)
        {
            tb_cashier_stall tall = new tb_cashier_stall();
            tall.name = name;
            tall.type = type;
            tall.dining_tall = dining_hall_id;
            tall.school_card_rate = school_card_rate;
            tall.student_card_rate = student_card_rate;
            tall.refund = 0;
            tall.subsidy = subsidy;
            tall.payee_account = payee_account;
            tall.subsidy = subsidy;
            tall.refund_password = refundpassword;
            long id = _tb_cashier_stallService.Insert(tall);
            if (id > 0)
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.AddSuccess,
                    id = id
                });

            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.AddFail

                });
            }

        }


        /// <summary>
        /// 新增设备
        /// </summary>
        /// <param name="sn"></param>
        /// <param name="brand"></param>
        /// <param name="stallid"></param>
        /// <param name="school_id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult AddDevice(string sn,int brand,int stallid,string school_id)
        {
            tb_cashier_device device = new tb_cashier_device();
            device.brand = brand;
            device.schoolcode = school_id;
            device.sn = sn;
            device.stall = stallid;
            long id = _tb_cashier_deviceService.Insert(device);
            if (id > 0)
            {

                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.AddSuccess,
                    id=id

                });
            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.AddFail

                });
            }


        }

     /// <summary>
     /// 修改设备
     /// </summary>
     /// <param name="id"></param>
     /// <param name="sn"></param>
     /// <param name="brand"></param>
     /// <param name="stallid"></param>
     /// <returns></returns>
        [HttpGet]
        public ActionResult Edit_Device(int id,string sn, int brand, int stallid)
        {
            var device= _tb_cashier_deviceService.FindByClause(p => p.id == id);
            device.sn = sn;
            device.brand = brand;
            device.stall = stallid;
            if(_tb_cashier_deviceService.Update(device))
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.UpdateSuccess

                });
            }
            else
            {

                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.UploadFail

                });
            }

        }


        /// <summary>
        /// 修改档口
        /// </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="type"></param>
        /// <param name="dining_hall_id"></param>
        /// <param name="school_card_rate"></param>
        /// <param name="student_card_rate"></param>
        /// <param name="other_rate"></param>
        /// <param name="refund"></param>
        /// <param name="payee_account"></param>
        /// <param name="subsidy"></param>
        /// <param name="refundpassword"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Edit_stall(int id,string name, int type, int dining_hall_id, int school_card_rate, int student_card_rate, int other_rate, int refund, int payee_account, int subsidy, string refundpassword)
        {
            tb_cashier_stall tall = _tb_cashier_stallService.FindByClause(p => p.id == id);
            tall.name = name;
            tall.type = type;
            tall.dining_tall = dining_hall_id;
            tall.school_card_rate = school_card_rate;
            tall.student_card_rate = student_card_rate;
            tall.subsidy = subsidy;
            tall.refund_password = refundpassword;
            if (_tb_cashier_stallService.Update(tall))
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.UpdateSuccess

                });

            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.UploadFail

                });

            }

        }

        /// <summary>
        /// 修改食堂
        /// </summary>
        /// <param name="id"></param>
        /// <param name="name"></param>
        /// <param name="introduction"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Edit_dining_hall(int id,string name, string introduction)
        {
            var hall = _Itb_cashier_dining_hallService.FindByClause(p => p.id == id);
            hall.name = name;
            hall.introduction = introduction;
            if(_Itb_cashier_dining_hallService.Update(hall))
            {
                return Json(new
                {
                    code = JsonReturnMsg.SuccessCode,
                    msg = JsonReturnMsg.UpdateSuccess

                });

            }
            else
            {
                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = JsonReturnMsg.UploadFail

                });

            }

        }

        /// <summary>
        /// 获取食堂信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Get_dining_hall(int id)
        {
            var hall = _Itb_cashier_dining_hallService.FindByClause(p => p.id == id);
            if(hall!=null)
            {
                return Json(new
                {
                    code = "10000",
                    msg = "查询成功",
                    data=hall

                });

            }
            else
            {
                return Json(new
                {
                    code = "00000",
                    msg = "查询失败"

                });

            }

        }


        /// <summary>
        /// 获取档口信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Get_stall(int id)
        {
            var stall = _tb_cashier_stallService.FindByClause(p=>p.id==id);
            if (stall != null)
            {
                return Json(new
                {
                    code = "10000",
                    msg = "查询成功",
                    data = stall

                });

            }
            else
            {
                return Json(new
                {
                    code = "00000",
                    msg = "查询失败"

                });

            }


        }

        /// <summary>
        /// 获取设备信息
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpGet]
        public ActionResult Get_decive(int id)
        {
            var decive = _tb_cashier_deviceService.FindByClause(p => p.id == id);
            if (decive != null)
            {
                return Json(new
                {
                    code = "10000",
                    msg = "查询成功",
                    data = decive

                });

            }
            else
            {
                return Json(new
                {
                    code = "00000",
                    msg = "查询失败"

                });

            }


        }

        /// <summary>
        /// 设备转移
        /// </summary>
        /// <param name="stallid"></param>
        /// <param name="deviceid"></param>
        /// <returns></returns>
        [HttpGet]
        public JsonResult MoveDeviceInfo(string stallid, int deviceid)
        {
            try
            {

               var dev=_tb_cashier_deviceService.FindByClause(p => p.id == deviceid);
               bool f= _tb_cashier_deviceService.UpdateColumnsByConditon(a =>
                         new tb_cashier_device {  stall=Convert.ToInt32(stallid) },
                         a => a.id == deviceid);
                if(f)
                {
                    return Json(new
                    {
                        code = JsonReturnMsg.SuccessCode,
                        msg = "转移成功"
                    });

                }
                else
                {
                    return Json(new
                    {
                        code = JsonReturnMsg.FailCode,
                        msg = "转移失败"
                    });
                }
              
             
            }
            catch (Exception ex)
            {
              

                return Json(new
                {
                    code = JsonReturnMsg.FailCode,
                    msg = "转移失败"
                });
            }
        }





























    }
}