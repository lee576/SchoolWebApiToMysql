<template>
    <div class="home">
        <div class="nav-lead clearfix">
            <div class="fl nav-lead-word"><a href="#">电子校园卡</a></div>
            <div class="fr batch-operation">
                <a href="#" class="operation-btn">批量操作</a>
                <ul class="operation-ul">
                    <li>
                        <el-button type="text" @click="dialogVisible = true">批量导入</el-button>
                    </li>
                    <li>
                        <el-button type="text" @click="exportVisible = true">批量导出</el-button>
                    </li>
                    <li>
                        <el-button type="text" @click="delectVisible = true">批量删除</el-button>
                    </li>
                    <li>
                        <el-button type="text" @click="moveVisible = true">批量移动</el-button>
                    </li>
                    <li>
                        <el-button type="text" @click="welcomeVisible = true">迎新状态</el-button>
                    </li>
                </ul>
            </div>
        </div>
        <div class="page-content">
            <div class="row">
                <div class="col-xs-12 col-sm-12">
                    <div class="nav-tab clearfix">
                        <ul class="nav-tab-change1 fl">
                            <li :class="{active:isShowGraph}" @click="isShowGraph=true">
                                <label class="fl view-img1"></label>
                                <span class="fl">视图</span>
                            </li>
                            <li :class="{active:!isShowGraph}" @click="isShowGraph=false">
                                <label class="fl view-img2"></label>
                                <span class="fl">树状图</span>
                            </li>
                        </ul>
                        <ul class="nav-tab-change2 fl" @click="tabswitch">
                            <li v-for="(v,i) in tabTitle" :class="isShowTab==i?'active':''">{{v}}</li>
                        </ul>
                        <div class="fl">
                            <button class="btn-mo">+新增校园卡</button>
                        </div>
                    </div>

                </div>
            </div>
            <ul class="view-tree-box">
                <!--视图-->
                <li class="ym-view-box" :style="{display:isShowGraph?'block':'none'}">

                    <el-row :gutter="10">
                        <el-col :xs="24" :sm="24" :md="24" :lg="10" :xl="10">
                            <div class="card-box">
                                <div class="school-select-box">
                                    <el-select v-model="value1" filterable placeholder="请选择"
                                               @change="changeSchoolcourt">
                                        <el-option
                                                v-for="schoolCourt in schoolCourts"
                                                :key="schoolCourt.name"
                                                :label="schoolCourt.label"
                                                :value="schoolCourt.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="school-xi-box">
                                    <el-select v-model="value2" filterable placeholder="请选择"
                                               @change="changeSchooldepartment">
                                        <el-option
                                                v-for="schoolDepartment in schoolDepartments"
                                                :key="schoolDepartment.name"
                                                :label="schoolDepartment.label"
                                                :value="schoolDepartment.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="school-xi-box">
                                    <el-select v-model="value3" filterable placeholder="请选择">
                                        <el-option
                                                v-for="schoolClass in schoolClasses"
                                                :key="schoolClass.name"
                                                :label="schoolClass.label"
                                                :value="schoolClass.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="card-outtime clearfix">
                                    <div class="fl">即将过期卡片 : 0</div>
                                    <a href="#" class="fr details-table" @click="isShowGraph=false">详情</a>
                                </div>
                            </div>

                        </el-col>
                        <el-col :xs="24" :sm="24" :md="24" :lg="14" :xl="14">
                            <div class="card-box">
                                <div class="card-pad clearfix">
                                    <div class="left-card-num fl">
                                        <div>发卡数量</div>
                                        <div class="fa-card">{{ cardAccount | currency('',false) }}</div>
                                    </div>
                                    <div class="right-card-num fl">
                                        <el-progress :text-inside="true" :stroke-width="30"
                                                     :percentage=Number(parseRate.amountRate)></el-progress>
                                        <div class="card-num-totel clearfix">
                                            <div class="fl">
                                                已领卡数量 <span
                                                    class="has-card-num">{{ leaderCard | currency('',false) }}</span>
                                            </div>
                                            <div class="fr">
                                                未领卡数量 <span class="no-card-num">{{ unCard | currency('',false) }}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                        </el-col>
                    </el-row>

                    <el-row :gutter="10">
                        <!--<el-col :xs="24" :sm="24" :md="24" :lg="10" :xl="10">
                            <div class="ym-body">
                                <div class="ym-body-title">使用热度</div>
                                <div id="circleChart" :style="{width: '100%', height: '420px'}"></div>
                                <div class="process-box-ab">
                                    <div class="ab-on1">
                                        <div class="cx-code">付款码</div>
                                        <div class="ab-on-pro"><el-progress :text-inside="true" :stroke-width="23" :percentage="50" color="#F8991C"></el-progress></div>
                                        <div>100人/50%</div>
                                    </div>
                                    <div class="ab-on1">
                                        <div class="cx-code">校园码码</div>
                                        <div class="ab-on-pro"><el-progress :text-inside="true" :stroke-width="23" :percentage="80"></el-progress></div>
                                        <div>160人/80%</div>
                                    </div>
                                </div>
                            </div>
                        </el-col>-->
                        <el-col :xs="24" :sm="24" :md="24" :lg="24" :xl="24">
                            <div class="ym-body">
                                <div class="ym-body-title">增长情况</div>
                                <ul class="date-tab clearfix">

                                    <li :class="{active:dateChoose}" @click="dateChooseType(3)">最近3天</li>
                                    <li :class="{active:!dateChoose}" @click="dateChooseType(7)">最近7天</li>
                                </ul>
                                <div id="barChart" :style="{width: '100%', height: '420px'}"></div>
                            </div>
                        </el-col>
                    </el-row>
                </li>
                <!--树状图-->
                <li class="ym-tree-box" :style="{display:isShowGraph?'none':'block'}">

                    <div class="two-part-box">
                        <div class="one-part-tree">
                            <el-tree :data="dataArr" :props="defaultProps" @node-click="handleNodeClick" node-key="id"
                                     :default-expanded-keys="[10894]"></el-tree>
                            <div class="ztree-icon">
                                <span class="icon iconfont el-icon-tianjia" @click="OpenaddTree"></span>
                                <span class="icon iconfont el-icon-icon-edit" @click="OpeneditTree"></span>
                                <span class="icon iconfont el-icon-shanchu" @click="OpendeleteTree"></span>
                            </div>
                        </div>
                        <div class="one-part-table">
                            <div class="one-row clearfix">
                                <div class="school-select-box1 fl">
                                    <el-select v-model="value1" filterable placeholder="请选择"
                                               @change="changeSchoolcourt">
                                        <el-option
                                                v-for="schoolCourt in schoolCourts"
                                                :key="schoolCourt.name"
                                                :label="schoolCourt.label"
                                                :value="schoolCourt.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="school-xi-box1 fl">
                                    <el-select v-model="value2" filterable placeholder="请选择"
                                               @change="changeSchooldepartment">
                                        <el-option
                                                v-for="schoolDepartment in schoolDepartments"
                                                :key="schoolDepartment.name"
                                                :label="schoolDepartment.label"
                                                :value="schoolDepartment.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="school-xi-box1 fl">
                                    <el-select v-model="value3" filterable placeholder="请选择">
                                        <el-option
                                                v-for="schoolClass in schoolClasses"
                                                :key="schoolClass.name"
                                                :label="schoolClass.label"
                                                :value="schoolClass.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="fl class-person">8个班 | 共257人</div>

                            </div>
                            <div class="one-row clearfix">
                                <div class="fl">
                                    <div class="fl search-input"><input type="text" class="se-input"
                                                                        placeholder="请输入需要查询的学工号或姓名"></div>
                                    <div class="fr search-button">
                                        <button class="btn-pro">搜索</button>
                                    </div>
                                </div>
                                <div class="fr search-one" style="margin-right: 0">
                                    <div class="fl search-word1">是否领卡</div>
                                    <div class="fl">
                                        <el-select v-model="value" placeholder="请选择">
                                            <el-option
                                                    v-for="item in cardchooseoptions"
                                                    :key="item.value"
                                                    :label="item.label"
                                                    :value="item.value">
                                            </el-option>
                                        </el-select>
                                    </div>
                                    <div class="fl">
                                        <router-link to="/personneladd" class="add_user_on">新增用户</router-link>
                                    </div>
                                </div>

                            </div>
                            <div class="table-box">
                                <template>
                                    <el-table :data="tableData" stripe style="width: 100%">
                                        <el-table-column
                                                type="selection"
                                                width="55">
                                        </el-table-column>
                                        <el-table-column prop="user_name" label="姓名">
                                        </el-table-column>
                                        <el-table-column prop="student_id" label="学号">
                                        </el-table-column>
                                        <el-table-column label="卡类型">
                                            <template scope="scope">
                                                {{ scope.row.card_state==0 ? '学生卡':'老师卡' }}
                                            </template>
                                        </el-table-column>
                                        <el-table-column label="是否领卡">
                                            <template scope="scope">
                                                {{ scope.row.class_id==0 ? '未领卡':'领卡' }}
                                            </template>
                                        </el-table-column>
                                        <el-table-column label="是否迎新">
                                            <template scope="scope">
                                                {{ scope.row.welcome_flg==0 ? '不迎新':'迎新' }}
                                            </template>
                                        </el-table-column>
                                        <el-table-column label="操作">
                                            <template slot-scope="scope">
                                                <el-button type="text" size="small" class="edit-tr-con"
                                                           @click="handleEdit(scope.$index, scope.row)">修改
                                                </el-button>
                                                <el-button type="text" size="small" class="del-tr-con"
                                                           @click="handleEdit(scope.$index, scope.row)">删除
                                                </el-button>
                                            </template>
                                        </el-table-column>
                                    </el-table>
                                    <div class="page-pagination">
                                        <el-pagination
                                                @size-change="handleSizeChange"
                                                @current-change="handleCurrentChange"
                                                :current-page="configTable.index"
                                                :page-size="configTable.size"
                                                background
                                                layout="prev, pager, next"
                                                :total="configTable.total">
                                        </el-pagination>
                                    </div>
                                </template>
                            </div>
                        </div>
                    </div>

                </li>
            </ul>
        </div>


        <!--批量导入-->
        <el-dialog title="批量导入" :visible.sync="dialogVisible" width="600px" top="20vh">
            <div class="gray-import">
                <div class="improt-word1">注意事项：</div>
                <ul class="improt-word2">
                    <li>1、必须按照指定的模板格式才能导入成功。</li>
                    <li>2、如果Excel中数据已存在，则会覆盖原有信息。</li>
                    <li>3、请按照对应的卡片导入数据。</li>
                    <li>4、请上传Excel后缀为.xls文件。</li>
                </ul>
                <div class="improt-word3">下载模板：<span @click="download">校园学生卡数据导入示例表</span></div>
            </div>
            <div class="gray-import" style="margin-top:10px;">
                <el-upload
                        class="upload-demo"
                        :drag='true'
                        action="http://192.168.1.4:5000/api/User/StudenttempletChangeJson"
                        multiple
                        :data="uploadData"
                        accept="xls"
                        :before-upload="beforeAvatarUpload"
                >
                    <i class="el-icon-upload"></i>
                    <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
                    <div class="el-upload__tip" slot="tip">只能上传jpg/png文件，且不超过500kb</div>
                </el-upload>

            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogVisible = false">取 消</el-button>
                <el-button type="primary" @click="dialogVisible = false" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <!--批量导出-->
        <el-dialog title="批量导出" :visible.sync="exportVisible" width="600px" top="25vh">
            <div class="layer-tip-word">确定导出以下数据？</div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="exportVisible = false">取 消</el-button>
                <el-button type="primary" @click="exportVisible = false" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <!--批量删除-->
        <el-dialog title="批量删除" :visible.sync="delectVisible" width="600px" top="25vh">
            <div class="layer-tip-word">删除会同时完成解绑，是否继续？( 操作不可逆 )？</div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="delectVisible = false">取 消</el-button>
                <el-button type="primary" @click="delectVisible = false" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <!--批量移动-->
        <el-dialog title="批量移动" :visible.sync="moveVisible" width="600px" top="25vh">
            <div class="tk-gray">
                <el-cascader
                        expand-trigger="hover"
                        :options="options"
                        v-model="selectedOptions2"
                        @change="handleChange">
                </el-cascader>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="moveVisible = false">取 消</el-button>
                <el-button type="primary" @click="moveVisible = false" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <!--迎新状态-->
        <el-dialog title="迎新状态" :visible.sync="welcomeVisible" width="600px" top="25vh">
            <div class="layer-tip-word">选择迎新状态</div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="welcomeVisible = false">迎新</el-button>
                <el-button type="primary" @click="welcomeVisible = false" class="sure-btn">不迎新</el-button>
            </div>
        </el-dialog>
        <el-dialog title="新增部门信息" :visible.sync="addtreeVisible" width="600px" top="25vh">
            <div class="tk-gray">
                <el-input v-model="addtreeinput" placeholder="请输入内容" @change="check"></el-input>
                <div class="err-plchod" style="font-size: 13px ;color:red;padding-top: 5px">{{errname}}</div>
                <template>
                    <el-radio v-model="isClass" label="0">学生班级</el-radio>
                    <el-radio v-model="isClass" label="1">老师部门</el-radio>
                </template>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="addtreeVisible = false">取 消</el-button>
                <el-button type="primary" @click="SureaddtreeVisible" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <el-dialog title="编辑部门信息" :visible.sync="edittreeVisible" width="600px" top="25vh">
            <div class="tk-gray">
                <el-input v-model="edittreeinput.name" placeholder="请输入内容" @change="check"></el-input>
                <div class="err-plchod" style="font-size: 13px ;color:red;padding-top: 5px">{{errname}}</div>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="edittreeVisible = false">取 消</el-button>
                <el-button type="primary" @click="SureedittreeVisible" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <el-dialog title="删除部门信息" :visible.sync="deletetreeVisible" width="600px" top="25vh">
            <div class="tk-gray">
                <span>确定是否删除</span>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="deletetreeVisible = false">取 消</el-button>
                <el-button type="primary" @click="SuredeletetreeVisible" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>


    </div>
</template>

<script>
    import {currency} from './../../../util/currency';
    import {getDateType} from './../../../util/getDate';
    // 引入基本模板
    let echarts = require('echarts/lib/echarts');
    // 引入柱状图组件
    require('echarts/lib/chart/bar');
    require("echarts/lib/chart/pie");
    // 引入提示框和title组件
    require('echarts/lib/component/tooltip');
    require('echarts/lib/component/title');
    export default {
        name: "Campus_user",

        data() {
            return {
                uploadData: {
                    "schoolcode": "55555"
                },


                schoolCourts: [],//院
                schoolDepartments: [],//系
                schoolClasses: [],//班


                dateChoose: true,
                stuArr: [],
                teachArr: [],
                dateArr: [],
                dateArr1: [],
                cardchooseoptions: [{
                    value: '选项1',
                    label: '全部'
                }, {
                    value: '选项2',
                    label: '已领卡'
                }, {
                    value: '选项3',
                    label: '未领卡'
                }],
                options1: [{
                    value: '选项1',
                    label: '学院'
                }, {
                    value: '选项2',
                    label: '系院'
                }, {
                    value: '选项3',
                    label: '班级'
                }, {
                    value: '选项4',
                    label: '设计01'
                }, {
                    value: '选项5',
                    label: '设计02'
                }],
                errname: "",//树形验证
                gainaddtree: "",//获取新增父级内容
                addtreeinput: "",//新增内容
                edittreeinput: "",//编辑内容
                deletetreeinput: "",//删除内容
                isClass: '0',//新增选项
                value: '',
                value1: '',//院
                value2: '',//系
                value3: '',//班级
                treeData: '',//点击获取树形图信息
                dialogVisible: false,
                exportVisible: false,
                delectVisible: false,
                moveVisible: false,
                welcomeVisible: false,
                addtreeVisible: false,
                edittreeVisible: false,
                deletetreeVisible: false,
                select_bg: require('@/assets/picture/images/select-bg.png'),
                select_checked: require('@/assets/picture/images/select-checked.png'),
                tableData: [{
                    student_id: '',
                    user_name: '',
                    card_state: '',
                    welcome_flg: '',
                    class_id: '',

                }],
                tabTitle: ['全部', '老师', '学生'],
                isShowTab: 0,
                isShowGraph: true,
                dataArr: [],
                configTable: {
                    total: 0,
                    size: 10,
                    index: 1
                },
                defaultProps: {
                    children: 'children',
                    label: 'label'
                },
                options: [{
                    value: 'zhinan',
                    label: '指南',
                    children: [{
                        value: 'shejiyuanze',
                        label: '设计原则',
                        children: [{
                            value: 'yizhi',
                            label: '一致'
                        }, {
                            value: 'fankui',
                            label: '反馈'
                        }, {
                            value: 'xiaolv',
                            label: '效率'
                        }, {
                            value: 'kekong',
                            label: '可控'
                        }]
                    }, {
                        value: 'daohang',
                        label: '导航',
                        children: [{
                            value: 'cexiangdaohang',
                            label: '侧向导航'
                        }, {
                            value: 'dingbudaohang',
                            label: '顶部导航'
                        }]
                    }]
                }, {
                    value: 'zujian',
                    label: '组件',
                    children: [{
                        value: 'basic',
                        label: 'Basic',
                        children: [{
                            value: 'layout',
                            label: 'Layout 布局'
                        }, {
                            value: 'color',
                            label: 'Color 色彩'
                        }, {
                            value: 'typography',
                            label: 'Typography 字体'
                        }, {
                            value: 'icon',
                            label: 'Icon 图标'
                        }, {
                            value: 'button',
                            label: 'Button 按钮'
                        }]
                    }, {
                        value: 'form',
                        label: 'Form',
                        children: [{
                            value: 'radio',
                            label: 'Radio 单选框'
                        }, {
                            value: 'checkbox',
                            label: 'Checkbox 多选框'
                        }, {
                            value: 'input',
                            label: 'Input 输入框'
                        }, {
                            value: 'input-number',
                            label: 'InputNumber 计数器'
                        }, {
                            value: 'select',
                            label: 'Select 选择器'
                        }, {
                            value: 'cascader',
                            label: 'Cascader 级联选择器'
                        }, {
                            value: 'switch',
                            label: 'Switch 开关'
                        }, {
                            value: 'slider',
                            label: 'Slider 滑块'
                        }, {
                            value: 'time-picker',
                            label: 'TimePicker 时间选择器'
                        }, {
                            value: 'date-picker',
                            label: 'DatePicker 日期选择器'
                        }, {
                            value: 'datetime-picker',
                            label: 'DateTimePicker 日期时间选择器'
                        }, {
                            value: 'upload',
                            label: 'Upload 上传'
                        }, {
                            value: 'rate',
                            label: 'Rate 评分'
                        }, {
                            value: 'form',
                            label: 'Form 表单'
                        }]
                    }, {
                        value: 'data',
                        label: 'Data',
                        children: [{
                            value: 'table',
                            label: 'Table 表格'
                        }, {
                            value: 'tag',
                            label: 'Tag 标签'
                        }, {
                            value: 'progress',
                            label: 'Progress 进度条'
                        }, {
                            value: 'tree',
                            label: 'Tree 树形控件'
                        }, {
                            value: 'pagination',
                            label: 'Pagination 分页'
                        }, {
                            value: 'badge',
                            label: 'Badge 标记'
                        }]
                    }, {
                        value: 'notice',
                        label: 'Notice',
                        children: [{
                            value: 'alert',
                            label: 'Alert 警告'
                        }, {
                            value: 'loading',
                            label: 'Loading 加载'
                        }, {
                            value: 'message',
                            label: 'Message 消息提示'
                        }, {
                            value: 'message-box',
                            label: 'MessageBox 弹框'
                        }, {
                            value: 'notification',
                            label: 'Notification 通知'
                        }]
                    }, {
                        value: 'navigation',
                        label: 'Navigation',
                        children: [{
                            value: 'menu',
                            label: 'NavMenu 导航菜单'
                        }, {
                            value: 'tabs',
                            label: 'Tabs 标签页'
                        }, {
                            value: 'breadcrumb',
                            label: 'Breadcrumb 面包屑'
                        }, {
                            value: 'dropdown',
                            label: 'Dropdown 下拉菜单'
                        }, {
                            value: 'steps',
                            label: 'Steps 步骤条'
                        }]
                    }, {
                        value: 'others',
                        label: 'Others',
                        children: [{
                            value: 'dialog',
                            label: 'Dialog 对话框'
                        }, {
                            value: 'tooltip',
                            label: 'Tooltip 文字提示'
                        }, {
                            value: 'popover',
                            label: 'Popover 弹出框'
                        }, {
                            value: 'card',
                            label: 'Card 卡片'
                        }, {
                            value: 'carousel',
                            label: 'Carousel 走马灯'
                        }, {
                            value: 'collapse',
                            label: 'Collapse 折叠面板'
                        }]
                    }]
                }, {
                    value: 'ziyuan',
                    label: '资源',
                    children: [{
                        value: 'axure',
                        label: 'Axure Components'
                    }, {
                        value: 'sketch',
                        label: 'Sketch Templates'
                    }, {
                        value: 'jiaohu',
                        label: '组件交互文档'
                    }]
                }],
                selectedOptions: [],
                selectedOptions2: [],
                cardAccount: "",
                leaderCard: '',
                unCard: '',
            };
        },
        mounted() {
            this.drawLine();
            /* this.drawCircle();*/
            this.getParams();
        },
        filters: {
            currency: currency,
            getDateType: getDateType
        },
        created() {
            this.cardData();
            this.dateArr1 = [getDateType(1, -3), getDateType(1, 0)];
            this.treeList();
            this.init()
        },
        methods: {
            // 选项框联动
            changeSchoolcourt() {
                this.schoolDepartments = []
                this.schoolCourts.map(item => {
                    if (item.name == this.value1) {
                        this.schoolDepartments = item.children
                    }
                })
            },
            changeSchooldepartment() {
                this.schoolClasses = []
                this.schoolDepartments.map(item => {
                    if (item.name == this.value2) {
                        this.schoolClasses = item.children
                    }
                })
            },


            OpenaddTree() {
                this.addtreeVisible = true
                this.gainaddtree = this.treeData
            },
            SureaddtreeVisible() {
                console.log(this.gainaddtree)
                const addtree = {
                    "isClass": this.isClass,
                    "schoolcode": "55555",
                    "treeLevel": this.gainaddtree.treeLever,
                    "p_id": this.gainaddtree.id,
                    "name": this.addtreeinput
                }
                console.log(addtree)
                this.axios.post(`api/SchoolDepartment/AddDepartment`, addtree).then(res => {
                    console.log(res)
                    if (res.data.code == "000000") {
                        this.addtreeVisible = false
                        this.treeList();
                    }
                })
            },
            OpeneditTree() {
                this.edittreeVisible = true
                this.edittreeinput = this.treeData
            },
            SureedittreeVisible() {
                const edittree = {
                    "id": this.edittreeinput.id,
                    "schoolcode": "55555",
                    "name": this.edittreeinput.name
                }
                this.axios.post(`api/SchoolDepartment/UpdateDepartment`, edittree).then(res => {
                    if (res.data.code == "000000") {
                        this.edittreeVisible = false
                        this.treeList();
                    }
                })
            },
            OpendeleteTree() {
                this.deletetreeVisible = true
                this.deletetreeinput = this.treeData
            },
            SuredeletetreeVisible() {
                const deletetree = {
                    "id": this.deletetreeinput.id,
                    "schoolcode": "55555",
                    "name": this.deletetreeinput.name
                }
                this.axios.post(`api/SchoolDepartment/DeleteDepartment`, deletetree).then(res => {
                    console.log(res)
                    if (res.data.code == "000000") {
                        this.deletetreeVisible = false
                        this.treeList();
                    }
                })
            },
            // 分页
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
                this.configTable.index = 1
                this.configTable.size = val
                this.getDataList()
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
                this.configTable.index = val
                this.getDataList()
            },
            init() {
                const tabledata = {
                    "school_Code": "10027",
                    "iDisplayStart": this.configTable.size,
                    "iDisplayLength": this.configTable.index,
                    "userNameOrId": "",
                    "branchId": this.value1,
                    "departmentId": this.value2,
                    "department_classId": this.value3,
                    "classId": "0",
                    "card_state": "0",
                }
                console.log(tabledata)
                this.axios.get(`/api/SchoolUser/FindSchoolUserInfo`, tabledata).then(res => {
                    console.log(res)
                    // if (res.data.code == "000000") {
                    //     this.tableData = res.data.aaData
                    // }

                })
            },

            check: function () {
                // if (this.addtreeinput != "") {
                //     this.errname = "";
                // } else {
                //     this.errname = "用户名不能为空";
                // }
            },

            beforeAvatarUpload(file) {
                console.log(file)
                // console.log(file)

            },


            getParams() {
                // 取到路由带过来的参数
                const linkR = this.$route.query.linkR;
                // 将数据放在当前组件的数据内

                if (linkR) {
                    this.isShowGraph = false;
                }

            },
            dateChooseType(type) {
                var self = this;
                if (type == 3) {
                    self.dateChoose = true;
                    self.drawLine(getDateType(1, -3), getDateType(1, 0));
                } else if (type == 7) {
                    self.dateChoose = false;
                    self.drawLine(getDateType(1, -7), getDateType(1, 0));
                }

            },
            //柱形图
            drawLine(stime, etime) {
                let self = this;
                // 基于准备好的dom，初始化echarts实例
                let barChart = echarts.init(document.getElementById('barChart'));

                // 绘制图表
                if (!stime) {
                    stime = self.dateArr1[0]
                }
                if (!etime) {
                    etime = self.dateArr1[1]
                }

                self.axios.get('api/SchoolCodr/SchoolCardGrowth', {
                    params: {
                        school_id: localStorage.schoolcode,
                        stime: stime,
                        etime: etime,
                    }
                })
                    .then(function (response) {
                        if (response.data.code == '000000') {
                            let res = response.data;
                            self.dateArr = res.rqs.reverse();
                            self.teachArr = res.teacherlist.reverse();
                            self.stuArr = res.stulist.reverse();
                            // 基于准备好的dom，初始化echarts实例
                            barChart.setOption({
                                tooltip: {
                                    trigger: 'axis'
                                },
                                legend: {
                                    data: ['学生卡', '教师卡'],
                                    formatter: function (name) {
                                        console.log(name)
                                        if (name == '学生卡') {
                                            return name;
                                        } else {
                                            return name;
                                        }
                                    },
                                    orient: 'vertical',
                                    align: 'right',
                                    itemWidth: 20,
                                    itemHeight: 20,
                                    right: 0,
                                    top: 'middle',
                                    textStyle: {
                                        // 图例的公用文本样式。
                                        fontWight: 'bold',
                                        fontSize: 20,
                                        color: '#707070'
                                    },
                                    symbolKeepAspect: true,
                                    itemGap: 20,
                                    // padding: [
                                    //     20,  // 上
                                    //     20, // 右
                                    //     20,  // 下
                                    //     20, // 左
                                    // ]

                                },

                                toolbox: {
                                    show: true,
                                    top: '0',
                                    right: '120',
                                    bottom: 'auto',
                                    left: 'auto',
                                    feature: {
                                        dataView: {show: true, readOnly: false},
                                        magicType: {show: true, type: ['line', 'bar']},
                                        restore: {show: true},
                                        saveAsImage: {show: true}
                                    }
                                },
                                calculable: true,
                                xAxis: [
                                    {
                                        type: 'category',
                                        //    boundaryGap : false,
                                        data: self.dateArr,
                                        splitLine: {
                                            show: true,
                                            lineStyle: {
                                                color: ['#ccc'],
                                                width: 1,
                                                type: 'dashed'
                                            }

                                        }

                                    }
                                ],
                                yAxis: [
                                    {
                                        type: 'value',
                                        splitLine: {
                                            show: true,
                                            lineStyle: {
                                                color: ['#ccc'],
                                                width: 1,
                                                type: 'dashed'
                                            }

                                        }
                                    }
                                ],
                                grid: {
                                    //show:true,
                                    //   backgroundColor: '#f9f9f9',
                                    borderWidth: 2,
                                    borderColor: '#ccc',
                                    top: '80',
                                    right: '120',
                                    bottom: '40',
                                    left: '30'

                                },
                                series: [
                                    {
                                        itemStyle: {
                                            normal: {
                                                color: ['#2387fb'],
                                                barBorderRadius: [8, 8, 0, 0]
                                            }
                                        },
                                        name: '教师卡',
                                        type: 'bar',
                                        data: self.stuArr,
                                        markPoint: {
                                            data: [
                                                {type: 'max', name: '最大值'},
                                                {type: 'min', name: '最小值'}
                                            ]
                                        },
                                        markLine: {
                                            data: [
                                                {type: 'average', name: '平均值'}
                                            ]
                                        },
                                        barWidth: 20
                                    },
                                    {
                                        itemStyle: {
                                            normal: {
                                                color: ['#ffb758'],
                                                barBorderRadius: [8, 8, 0, 0]
                                            }
                                        },
                                        name: '学生卡',
                                        type: 'bar',
                                        data: self.teachArr,
                                        /*markPoint : {
                                            data : [
                                                {name : '年最高', value : 182.2, xAxis: 7, yAxis: 183},
                                                {name : '年最低', value : 2.3, xAxis: 11, yAxis: 3}
                                            ]
                                        },*/
                                        markLine: {
                                            data: [
                                                {type: 'average', name: '平均值'}
                                            ]
                                        },
                                        barWidth: 20
                                    }
                                ],
                                show: true,

                            });
                        } else {
                            self.$message({
                                showClose: true,
                                message: '获取数据失败',
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });


            },
            //饼状图
            drawCircle() {
                let circleChart = echarts.init(document.getElementById('circleChart'));
                circleChart.setOption({
                    title: {
                        // text: '某站点用户访问来源',
                        //subtext: '纯属虚构',
                        x: '0',
                        textStyle: {
                            // 图例的公用文本样式。
                            // fontWight:'bold',
                            fontSize: 14,
                            color: '#707070'
                        },
                    },
                    tooltip: {
                        trigger: 'item',
                        formatter: "{a} <br/>{b} : {c} ({d}%)"
                    },
                    legend: {
                        bottom: 10,
                        left: 'center',
                        itemWidth: 20,
                        itemHeight: 20,
                        data: ['直接访问', '邮件营销'],
                        formatter: function (name) {
                            console.log(name)
                            if (name == '直接访问') {
                                return name;
                            } else {
                                return name;
                            }
                        },
                        itemGap: 40,
                    },
                    color: ['#ffb758', '#2387fb'],
                    series: [
                        {
                            name: '访问来源',
                            type: 'pie',
                            radius: '70%',
                            center: ['50%', '40%'],
                            // radius: ['50%', '70%'],  // 设置环形饼状图， 第一个百分数设置内圈大小，第二个百分数设置外圈大小
                            // center: ['50%', '50%'],  // 设置饼状图位置，第一个百分数调水平位置，第二个百分数调垂直位置

                            data: [
                                {value: 310, name: '直接访问'},
                                {value: 1135, name: '邮件营销'},

                            ],
                            itemStyle: {
                                emphasis: {
                                    shadowBlur: 10,
                                    shadowOffsetX: 0,
                                    shadowColor: 'rgba(0, 0, 0, 0.5)'
                                }
                            },
                            label: {
                                normal: {
                                    show: true,
                                    position: 'inside',
                                    formatter: '{d}%',//模板变量有 {a}、{b}、{c}、{d}，分别表示系列名，数据名，数据值，百分比。{d}数据会根据value值计算百分比

                                    textStyle: {
                                        align: 'center',
                                        baseline: 'middle',
                                        fontFamily: '微软雅黑',
                                        fontSize: 15,
                                        fontWeight: 'bolder'
                                    }
                                },
                            },
                        }
                    ]
                })

            },
            //学生 老师 全部 tab切换
            tabswitch() {
                if (!event) return;
                let target = event.target;

                if (target.nodeName.toLowerCase() !== 'li') {
                    return;
                }
                let len = target.parentNode.children;
                for (let i = 0; i < len.length; i++) {
                    len[i].index = i;
                    len[i].removeAttribute('class');
                }
                target.setAttribute('class', 'active');
                this.isShowTab = target.index;

            },
            //树状图
            handleNodeClick(data) {
                console.log(data);
                this.treeData = data
            },
            //班级级联
            handleChange(value) {
                console.log(value);
            },
            // 点击下载
            download() {
                let fileName = 'xxx.xls';// 文件地址
                let downName = (new Date()).getTime() + ".xls";// 文件下载名称
                const blob = new Blob([fileName]);
                if (window.navigator.msSaveOrOpenBlob) {
                    // 兼容IE10
                    navigator.msSaveBlob(blob, downName)
                } else {
                    //  chrome/firefox
                    let aTag = document.createElement('a')
                    aTag.download = downName
                    aTag.href = URL.createObjectURL(blob)
                    aTag.click()
                    URL.revokeObjectURL(aTag.href)
                }
            },

            cardData() {
                let self = this;
                self.axios.get('api/SchoolCodr/SchoolCardCount', {
                    params: {
                        school_id: localStorage.schoolcode
                    }
                })
                    .then(function (response) {
                        if (response.data.code == '000000') {
                            let res = response.data;
                            self.cardAccount = res.card_count;
                            self.leaderCard = res.registered_count;
                            self.unCard = res.unregistered_count;
                        } else {
                            self.$message({
                                showClose: true,
                                message: '获取数据失败',
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            treeList() {
                let self = this;
                self.axios.get('api/SchoolDepartment/GetSchoolDepartmentTree', {
                    params: {
                        schoolcode: '55555',
                    }
                })
                    .then(function (response) {
                        let res = response.data;
                        console.log(response)
                        var arr = [];
                        if (res.code == '000000') {
                            arr.push(res.data);
                            self.dataArr = arr;
                            self.defaultProps = res.defaultProps;
                            self.schoolCourts = res.data.children
                            console.log(self.schoolCourts)
                        } else {
                            self.$message({
                                showClose: true,
                                message: res.msg,
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },

            // 点击编辑
            handleEdit(index, row) {
                console.log(index, row);
                console.log(row)
                this.categoryEdit = row
            },

        },
        computed: {
            parseRate: function () {
                let self = this, leaderCard = 0, cardAccount = 1, amountRate = 0;
                if (self.leaderCard != 0) {
                    leaderCard = self.leaderCard;
                }
                if (self.cardAccount != 0) {
                    cardAccount = self.cardAccount;
                }
                //领卡比例
                amountRate = (leaderCard * 100 / cardAccount).toFixed(2);

                return {amountRate: amountRate}

            },

        },
    }
</script>

<style scoped>

</style>