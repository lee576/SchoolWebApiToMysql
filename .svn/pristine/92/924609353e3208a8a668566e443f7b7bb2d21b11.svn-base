<template>
    <div class="home">
        <div class="nav-lead clearfix">
            <div class="fl nav-lead-word"><a href="#">食堂管理</a></div>
            <div class="fr batch-operation">
                <button class="operation-btn" @click="addHall">添加食堂</button>
            </div>
        </div>
        <div class="page-content">
            <div class="nav-tab clearfix">
                <div class="fl">
                    <div class="fl search-input"><input type="text" class="se-input" v-model="canteenName" @keyup.enter="search"  placeholder="请输入要查询的食堂、档口或设备编号"></div>
                    <div class="fl search-button"><button class="btn-pro" @click="search()">搜索</button></div>
                    <div class="fl search-button"><button class="btn-pro" @click="reset">重置</button></div>
                </div>
            </div>
            <div class="two-part-box">
                <div class="one-part-tree">
                    <div class="ztree-icon" style="margin-top: 0;margin-bottom: 8px">
                        <span class="icon iconfont el-icon-tianjia" @click="addMessage"></span>
                        <span class="icon iconfont el-icon-icon-edit" @click="editMessage"></span>
                        <span class="icon iconfont el-icon-shanchu" @click="deleteMessage"></span>
                    </div>
                    <div class="tree_data">
                        <el-tree :data="dataArr"   class="filter-tree" accordion  :default-expanded-keys="treeData" :props="defaultProps"   :filter-node-method="filterNode"  @node-click="handleNodeClick"
                                 node-key="id"
                                 ref="tree2"></el-tree>
                    </div>

                </div>
                <div class="one-part-table">
                    <div class="form-timerange">
                        <el-select placeholder="请选择消费食堂" style="width:180px" v-model="hallStr"  v-bind:disabled="hallStr?true:false" @change="hallChange">
                            <el-option v-for="item in hallArr" :label="item.name" :value="item.id" :key="item.id"></el-option>
                        </el-select>
                    </div>
                    <div class="table-box" style="margin-top: 15px">
                        <template>
                            <el-table
                                    :data="configTable.tableArr"
                                    stripe
                                    style="width: 100%">
                                <el-table-column
                                        prop="SN"
                                        label="设备编号"
                                >
                                </el-table-column>
                                <el-table-column
                                        prop="stallName"
                                        label="所在档口"
                                >
                                </el-table-column>
                                <el-table-column
                                        prop="diningName"
                                        label="消费食堂">
                                </el-table-column>
                                <el-table-column  label="操作" width="140">
                                    <template slot-scope="scope">
                                        <el-button type="text" size="small" class="view-tr-con" @click="moveVisible = true;deviceid = scope.row.deviceid;selectedOptions = [];">转移</el-button>
                                        <el-button type="text" size="small" class="edit-tr-con"
                                                   @click="equipEdit(scope.row)">修改
                                        </el-button>
                                        <el-button type="text" size="small" class="del-tr-con"  @click="tableDelete(scope.row.deviceid)">删除</el-button>
                                    </template>
                                </el-table-column>
                            </el-table>
                        </template>
                    </div>
                    <div class="block" style="text-align: right;">
                        <el-pagination
                                @size-change="handleSizeChange"
                                @current-change="handleCurrentChange"
                                :current-page.sync="configTable.currentPage"
                                :page-size="configTable.iDisplayLength"
                                layout="total, prev, pager, next"
                                :total="configTable.total">
                        </el-pagination>
                    </div>
                </div>
            </div>
        </div>
         <!--添加食堂-->
        <el-dialog :title="flagHall?'添加食堂':'修改食堂'" :visible.sync="canteenVisible" width="600px" top="20vh">
            <div class="tk-gray tk-height">
                <el-form :model="hallForm" :rules="recerules" ref="hallForm" label-width="80px" class="demo-ruleForm">
                    <el-form-item label="食堂名称" prop="name">
                        <el-input v-model="hallForm.name" placeholder="请输入食堂名称"></el-input>
                    </el-form-item>
                    <el-form-item label="食堂介绍" prop="description">
                        <el-input  type="textarea" v-model="hallForm.description" placeholder="请输入食堂介绍"></el-input>
                    </el-form-item>
                </el-form>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="canteenVisible = false">取 消</el-button>
                <el-button type="primary" @click="hallSubmit('hallForm')" class="sure-btn">{{flagHall?'添加':'修改'}}</el-button>
            </div>
        </el-dialog>
        <!--添加档口-->
        <el-dialog :title="nodeData.treeLever==1?'添加档口':'修改档口'"  :visible.sync="stallsVisible" width="600px" top="20vh">
            <div class="tk-gray tk-height">
                <el-form :model="stallForm" :rules="stallrules" ref="stallForm" label-width="80px" class="demo-ruleForm">
                    <el-form-item label="档口名称" prop="name">
                        <el-input v-model="stallForm.name" placeholder="请输入档口名称"></el-input>
                    </el-form-item>
                    <el-form-item label="消费设置">
                        <el-radio-group v-model="stallForm.is_user">
                            <el-radio label="0">校园卡用户消费</el-radio>
                            <el-radio label="1">支持所有人消费</el-radio>
                        </el-radio-group>
                    </el-form-item>
                    <el-form-item label="">
                        <div class="clearfix">
                            <div class="left-stall-on1 fl">身份类型</div>
                            <div class="left-stall-on2 fl">加价概要（不填或填写0则不允许消费）</div>
                        </div>
                        <div class="stall-input-number clearfix">
                            <div class="left-stall-on1 fl">学生卡</div>
                            <div class="left-stall-on2 fl">
                                <el-input-number v-model="stallForm.student" controls-position="right" @change="handleChange" :step="1" :min="0" :max="100"></el-input-number>
                                <p class="num-per">%</p>
                            </div>
                        </div>
                        <div class="stall-input-number clearfix">
                            <div class="left-stall-on1 fl">教师卡</div>
                            <div class="left-stall-on2 fl">
                                <el-input-number v-model="stallForm.teacher" controls-position="right" @change="handleTeacherChange" :step="1" :min="0" :max="100"></el-input-number>
                                <p class="num-per">%</p>
                            </div>

                        </div>
                        <div class="stall-input-number clearfix" :style="{display:stallForm.is_user == 1?'block':'none'}">
                            <div class="left-stall-on1 fl">非校园卡用户</div>
                            <div class="left-stall-on2 fl">
                                <el-input-number v-model="stallForm.other" controls-position="right" @change="handleOtherChange" :step="1" :min="0" :max="100"></el-input-number>
                                <p class="num-per">%</p>
                            </div>

                        </div>
                    </el-form-item>
                    <div class="high-set-on" style="margin-bottom: 15px;" :class="[{ active: isActive }]"  >
                        <span @click="toggleClass(isActive)">
                              <span  class="high-set-word" style="margin-left: 0">高级设置</span>
                        <span  class="high-set-img"></span>
                        </span>

                    </div>
                    <div :style="{display:(isActive?'block':'none')}">
                        <el-form-item label="餐补规则">
                            <el-radio-group v-model="stallForm.is_meal">
                                <el-radio label="0">无</el-radio>
                            </el-radio-group>
                        </el-form-item>
                    </div>
                </el-form>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="stallsVisible = false">取 消</el-button>
                <el-button type="primary" @click="stallSubmit('stallForm')"   class="sure-btn">{{nodeData.treeLever==1?'添加':'修改'}}</el-button>
            </div>
        </el-dialog>
        <!--添加设备-->
        <el-dialog :title="rowItem?'修改设备':'添加设备'"  :visible.sync="equipmentVisible" width="600px" top="20vh">
            <div class="tk-gray tk-height">
                <el-form :model="equipmentForm" :rules="equipmentrules" ref="equipmentForm" label-width="80px" class="demo-ruleForm">
                    <el-form-item label="设备品牌">
                        <el-radio-group v-model="equipmentForm.equipBrand">
                            <el-radio label="1">银通物联</el-radio>
                            <el-radio label="2">意锐</el-radio>
                            <el-radio label="3">鑫澳康</el-radio>
                            <el-radio label="4">禧云</el-radio>
                        </el-radio-group>
                    </el-form-item>
                    <el-form-item label="设备编号" prop="equipNo">
                        <el-input v-model="equipmentForm.equipNo" placeholder="请输入设备编号"></el-input>
                    </el-form-item>
                    <el-form-item label="所在档口">
                        {{equipmentForm.stallName}}
                    </el-form-item>
                </el-form>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="equipmentVisible = false">取 消</el-button>
                <el-button type="primary"  @click="equipSubmit('equipmentForm')"  class="sure-btn">{{rowItem?'修改':'添加'}}</el-button>
            </div>
        </el-dialog>
        <!--批量移动-->
        <el-dialog title="" :visible.sync="moveVisible" width="600px" top="25vh">
            <div class="tk-gray">
                <el-cascader
                        :change-on-select="true"
                        :options="moveData"
                        v-model="selectedOptions"
                        @change="handleChangemove"
                        :props="props">
                </el-cascader>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="moveVisible = false">取 消</el-button>
                <el-button type="primary" @click="move" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
    </div>

</template>

<script>
    export default {
        name: "CanteenManagement",
        data() {
            return {
                flagHall:false,
                rowItem:'',
                deviceid:'',
                treeData:[],
                moveVisible:false,
                moveData:[],//食堂联动
                selectedOptions: [],
                moveArr:[],
                props: {
                    value: 'id',
                    children: 'children',
                    label: 'label',

                },
                dataArr:[],
                keysArr:[],
                defaultProps: {
                    children: "children",
                    label: "label"
                },
                hallStr:'',
                stallStr:'',
                hallArr:[],
                configTable:{
                    tableArr:[],
                    total:0,
                    currentPage: 1,
                    iDisplayStart:0,
                    iDisplayLength:10,
                },
                nodeData:'',
                treeNode:'',
                canteenName: '',
                canteenVisible: false,
                stallsVisible:false,
                equipmentVisible:false,
                isActive:false,
                hallForm: {
                    name:'',
                    description:'',
                },recerules: {
                    name: [
                        {required: true, message: '请输入食堂名称', trigger: 'blur'}
                    ],
                    description: [
                        {required: true, message: '请输入食堂介绍', trigger: 'blur'}
                    ],
                },
                stallForm: {
                    name:'',
                    is_user:'0',
                    student:100,
                    teacher:100,
                    other:100,
                    is_meal:'0',
                },stallrules: {
                    name: [
                        {required: true, message: '请输入档口名称', trigger: 'blur'}
                    ]
                },
                equipmentForm: {
                    stallName:'',
                    equipBrand:'1',
                    equipNo:'',
                },equipmentrules: {
                    equipNo: [
                        {required: true, message: '请输入设备编号', trigger: 'blur'}
                    ]
                }
            }
        },
        created() {
            //食堂树
            this.treeList();
            //食堂下拉列表
            this.hallList();
            //设备表
            this.tableList();
        },
        methods: {
            //食堂列表
            hallList(){
                let self = this;
                self.axios.get('api/Cashier/GetDinningHall', {
                    params: {
                        school_id: localStorage.schoolcode,
                    }
                })
                    .then(function (response) {
                        let res = response.data;
                        if(res.code == '10000'){
                            self.hallArr = res.data;
                            if(!localStorage.dining_talls){
                                self.hallArr.unshift({id: '', name: '全部'});
                            }else {
                                self.hallStr = parseInt(localStorage.dining_talls);
                            }
                        }else {
                            self.$message({
                                showClose: true,
                                message: '获取数据失败',
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            hallChange(val){
                this.hallStr = val;
                this.tableList();
            },
            //高级设置
            toggleClass(e){
                if(e){
                    this.isActive = false;
                }else{
                    this.isActive = true;
                }
            },
            //树形数据
            treeList() {
                let self = this;
                self.axios.get('api/Cashier/GetDininglist', {
                    params: {
                        school_id: localStorage.schoolcode,
                        dining_talls:localStorage.dining_talls
                    }
                })
                    .then(function (response) {
                        let res = response.data;
                        var arr = [];
                        if (res.code == '10000') {
                            arr.push(res.data);
                            self.dataArr = arr;
                            self.treeData.push(res.data.id);
                            self.moveData = self.getTreeData(self.dataArr);
                        } else {
                            self.$message({
                                showClose: true,
                                message: res.msg,
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            getTreeData(data) {
                // 循环遍历json数据
                for (var i = 0; i < data.length; i++) {
                    if (data[i].children.length < 1) {
                        // children若为空数组，则将children设为undefined
                        data[i].children = undefined;
                    } else {
                        // children若不为空数组，则继续 递归调用 本方法
                        this.getTreeData(data[i].children);
                    }
                }
                return data;
            },
            //节点点击事件
            handleNodeClick(data,Node,p) {
                let self = this;
                self.nodeData = data;
                self.treeNode = Node;
                console.log(self.nodeData);
                console.log(Node);
                    if(data.treeLever == 0){
                        self.hallStr = null;
                        self.stallStr = '';
                        self.flagHall = true;
                    }else if(data.treeLever == 1){
                        self.hallStr = data.id;
                        self.stallStr = '';
                        self.flagHall = false;
                    }else if(data.treeLever == 2){
                        self.hallStr = Node.parent.data.id;
                        self.stallStr = data.id;
                    }
                self.tableList();
            },
            //设备列表
            tableList(){
                let self = this;
                self.axios.get('api/Cashier/Getdevice', {
                    params: {
                        school_id: localStorage.schoolcode,
                        sEcho:self.configTable.currentPage,
                        iDisplayStart:self.configTable.iDisplayStart,
                        iDisplayLength:self.configTable.iDisplayLength,
                        queryparm:self.canteenName,
                        hallid:self.hallStr,
                        tallid:self.stallStr,
                    }
                })
                    .then(function (response) {
                        let res = response.data;
                        if(res.code == '10000'){
                            self.configTable.tableArr = res.aaData;
                            self.configTable.total = res.iTotalRecords;
                        }else {
                            self.$message({
                                showClose: true,
                                message: res.msg,
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });

            },
            //搜索
            search(){
                this.configTable.iDisplayStart = 0;
                this.configTable.currentPage = 1;
                this.tableList();
                this.$refs.tree2.filter(this.canteenName);
            },
            reset(){
                this.canteenName = '';
                this.configTable.iDisplayStart = 0;
                this.configTable.currentPage = 1;
                this.hallStr = null;
                this.stallStr = '';
                this.tableList();
                this.treeList();

            },
            handleSizeChange(val) {
                console.log(`每页 ${val} 条`);
            },
            handleCurrentChange(val) {
                console.log(`当前页: ${val}`);
            },
            //设备删除
            tableDelete(id){
                let self = this;
                self.$confirm('此操作将永久删除该文件, 是否继续?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    self.axios.get('api/Cashier/DelDeldevice', {
                        params: {
                            id: id
                        }
                    })
                        .then(function (response) {
                            if(response.data.code == '000000'){
                                self.$message({
                                    showClose: true,
                                    message: response.data.msg,
                                    type: 'success'
                                });
                                self.tableList();

                            }else {
                                self.$message({
                                    showClose: true,
                                    message:response.data.msg,
                                    type: 'warning'
                                });
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }).catch(() => {
                    self.$message({
                        type: 'info',
                        message: '已取消'
                    });
                });
            },
            //食堂表单提交
            hallSubmit(ruleForm){
                let self = this,url = '';
                if(self.nodeData.treeLever == '1'){
                    self.$refs[ruleForm].validate((valid) => {
                        if(valid){
                            self.axios.get('api/Cashier/Edit_dining_hall', {
                                params: {
                                    id: self.nodeData.id,
                                    name: self.hallForm.name,
                                    introduction:self.hallForm.description,
                                }
                            })
                                .then(function (response) {
                                    if(response.data.code == '000000'){
                                        self.$message({
                                            showClose: true,
                                            message: response.data.msg,
                                            type: 'success'
                                        });
                                        self.canteenVisible = false;
                                        self.nodeData.label = self.hallForm.name;
                                        self.nodeData.name = self.hallForm.name;
                                        self.tableList();
                                        //食堂下拉列表
                                        self.hallList();
                                        self.hallStr = self.nodeData.id;
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });
                        }else {
                            return false;
                        }

                    })
                }else if(self.nodeData.treeLever == '0') {
                    self.$refs[ruleForm].validate((valid) => {
                        if(valid){
                            self.axios.get('api/Cashier/Add_dining_hall', {
                                params: {
                                    school_id: localStorage.schoolcode,
                                    name: self.hallForm.name,
                                    introduction:self.hallForm.description,
                                }
                            })
                                .then(function (response) {
                                    if(response.data.code == '000000'){
                                        self.$message({
                                            showClose: true,
                                            message: response.data.msg,
                                            type: 'success'
                                        });
                                        self.canteenVisible = false;
                                        const newChild = { id: response.data.id, label: self.hallForm.name, children: [] ,treeLever:1};
                                        if (!self.nodeData.children) {
                                            self.$set(self.nodeData, 'children', []);
                                        }
                                        self.nodeData.children.push(newChild);
                                        self.hallStr = response.data.id;
                                        self.tableList();
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });
                        }else {
                            return false;
                        }

                    })
                }

            },
            //档口表单提交
            stallSubmit(ruleForm){
                let self = this,url = '';
                console.log(self.nodeData.id);
                let json ={
                    name:self.stallForm.name,
                    type:self.stallForm.is_user,
                    dining_hall_id:self.nodeData.id,
                    school_card_rate:self.stallForm.teacher,
                    student_card_rate:self.stallForm.student,
                    other_rate:self.stallForm.other,
                    refund:'0',
                    payee_account:'1',
                    subsidy:'0',
                    refundpassword:''
                }
                if(self.nodeData.treeLever == '2'){
                    self.$refs[ruleForm].validate((valid) => {
                        if(valid){
                            self.axios.get('api/Cashier/Edit_stall', {
                                params: json
                            })
                                .then(function (response) {
                                    if(response.data.code == '000000'){
                                        self.$message({
                                            showClose: true,
                                            message: response.data.msg,
                                            type: 'success'
                                        });
                                        self.stallsVisible = false;
                                        self.nodeData.label = self.stallForm.name;
                                        self.nodeData.name = self.stallForm.name;
                                        self.stallStr = self.nodeData.id;
                                        self.tableList();
                                    }else {
                                        self.$message({
                                            showClose: true,
                                            message:response.data.msg,
                                            type: 'warning'
                                        });
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });
                        }else {
                            return false;
                        }

                    })
                }else if(self.nodeData.treeLever == '1') {
                    self.$refs[ruleForm].validate((valid) => {
                        if(valid){
                            self.axios.get('api/Cashier/Add_stall', {
                                params: json
                            })
                                .then(function (response) {
                                    if(response.data.code == '000000'){
                                        self.$message({
                                            showClose: true,
                                            message: response.data.msg,
                                            type: 'success'
                                        });
                                        self.stallsVisible = false;
                                        const newChild = { id: response.data.id, label: self.stallForm.name, children: [],treeLever:2 };
                                        if (!self.nodeData.children) {
                                            self.$set(self.nodeData, 'children', []);
                                        }
                                        self.nodeData.children.push(newChild);
                                        self.stallStr = response.data.id;
                                        self.tableList();
                                    }
                                })
                                .catch(function (error) {
                                    console.log(error);
                                });
                        }else {
                            return false;
                        }

                    })
                }
            },
            //设备表单提交
            equipSubmit(ruleForm){
                let self = this,url = '';
               if(self.rowItem){
                   console.log(self.rowItem)
                   self.$refs[ruleForm].validate((valid) => {
                       if(valid){
                           self.axios.get('api/Cashier/Edit_Device', {
                               params: {
                                   school_id: localStorage.schoolcode,
                                   stallid:self.rowItem.stall_id,
                                   brand: self.equipmentForm.equipBrand,
                                   id:self.rowItem.deviceid,
                                   sn:self.equipmentForm.equipNo,
                               }
                           })
                               .then(function (response) {
                                   if(response.data.code == '000000'){
                                       self.$message({
                                           showClose: true,
                                           message: response.data.msg,
                                           type: 'success'
                                       });
                                       self.equipmentVisible = false;
                                       self.tableList();

                                   }
                               })
                               .catch(function (error) {
                                   console.log(error);
                               });
                       }else {
                           return false;
                       }

                   })
               }else {
                   self.$refs[ruleForm].validate((valid) => {
                       if(valid){
                           self.axios.get('api/Cashier/AddDevice', {
                               params: {
                                   school_id: localStorage.schoolcode,
                                   stallid:self.nodeData.id,
                                   brand: self.equipmentForm.equipBrand,
                                   sn:self.equipmentForm.equipNo,
                               }
                           })
                               .then(function (response) {
                                   if(response.data.code == '000000'){
                                       self.$message({
                                           showClose: true,
                                           message: response.data.msg,
                                           type: 'success'
                                       });
                                       self.equipmentVisible = false;
                                       self.tableList();

                                   }
                               })
                               .catch(function (error) {
                                   console.log(error);
                               });
                       }else {
                           return false;
                       }

                   })
               }

            },
            //点击添加图标
            addMessage(){
                console.log(11111);
                console.log(this.nodeData)
                let self = this;
                if(self.nodeData== ''){
                    self.$message({
                        showClose: true,
                        message:'请选中学校',
                        type: 'warning'
                    });
                }else {
                    if(self.nodeData.treeLever == '0'){
                        //添加食堂
                        self.hallForm.name='';
                        self.hallForm.description='';
                        self.canteenVisible = true;
                    }else if(self.nodeData.treeLever == '1'){
                        //添加档口
                        self.stallForm.name='';
                        self.stallForm.student=100;
                        self.stallForm.teacher=100;
                        self.stallForm.other=100;
                        self.stallForm.is_meal='0';
                        self.stallForm.is_user='0';
                        self.stallsVisible = true;
                    }else  if(self.nodeData.treeLever == '2'){
                        //添加设备
                        self.equipmentForm.stallName = self.nodeData.label;
                        self.equipmentForm.equipBrand='1';
                        self.equipmentForm.equipNo='';
                        self.equipmentVisible = true;
                    }
                }

            },
            //点击修改图标
            editMessage(){
                let self = this;
                console.log(self.nodeData);
                if(self.nodeData.treeLever == '0'){
                    self.$message({
                        showClose: true,
                        message:'学校不可以修改',
                        type: 'warning'
                    });
                } else if(self.nodeData.treeLever == '1'){
                    //食堂展示数据
                    self.hallData();
                    self.canteenVisible = true;
                }else if(self.nodeData.treeLever == '2'){
                    //档口展示数据
                    self.stallData();
                    self.stallsVisible = true;
                }
            },
            //点击删除图标
            deleteMessage(){
                let self = this;
                if(self.nodeData.treeLever == '0'){
                    self.$message({
                        showClose: true,
                        message:'学校不可以删除',
                        type: 'warning'
                    });
                }else if(self.nodeData.treeLever == '1'){
                    //删除食堂
                    self.hallDelete();
                }else if(self.nodeData.treeLever == '2'){
                    self.stallDelete();
                }
            },
            //食堂展示数据
            hallData(){
                let self = this;
                self.axios.get('api/Cashier/Get_dining_hall', {
                    params: {
                       id:self.nodeData.id
                    }
                })
                    .then(function (response) {
                        let res = response.data;
                        if(res.code == '10000'){
                            self.hallForm.name=res.data.name;
                            self.hallForm.description=res.data.introduction;
                        }else {
                            self.$message({
                                showClose: true,
                                message: res.msg,
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            //档口展示数据
            stallData(){
                let self = this;
                self.axios.get('api/Cashier/Get_stall', {
                    params: {
                        id:self.nodeData.id
                    }
                })
                    .then(function (response) {
                        let res = response.data.data;
                        if(response.data.code == '10000'){
                            self.stallForm.name=res.name;
                            self.stallForm.student=res.student_card_rate;
                            self.stallForm.teacher=res.school_card_rate;
                            self.stallForm.other=res.other_rate;
                            self.stallForm.is_meal=res.subsidy.toString();
                            self.stallForm.is_user=res.type.toString();

                        }else {
                            self.$message({
                                showClose: true,
                                message: res.msg,
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            //食堂删除
            hallDelete(){
                let self = this;
                self.$confirm('此操作将永久删除该文件, 是否删除食堂?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    self.axios.get('api/Cashier/Del_dining_hall', {
                        params: {
                            id: self.nodeData.id
                        }
                    })
                        .then(function (response) {
                            if(response.data.code == '000000'){
                                self.$message({
                                    showClose: true,
                                    message: response.data.msg,
                                    type: 'success'
                                });
                                const parent = self.treeNode.parent;
                                const children = parent.data.children || parent.data;
                                const index = children.findIndex(d => d.id === self.nodeData.id);
                                children.splice(index, 1);
                                self.tableList();
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消'
                    });
                });
            },
            stallDelete(){
                let self = this;
                self.$confirm('此操作将永久删除该文件, 是否删除档口？', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    self.axios.get('api/Cashier/Del_stall', {
                        params: {
                            id: self.nodeData.id
                        }
                    })
                        .then(function (response) {
                            if(response.data.code == '000000'){
                                self.$message({
                                    showClose: true,
                                    message: response.data.msg,
                                    type: 'success'
                                });
                                const parent = self.treeNode.parent;
                                const children = parent.data.children || parent.data;
                                const index = children.findIndex(d => d.id === self.nodeData.id);
                                children.splice(index, 1);
                                self.tableList();
                            }
                        })
                        .catch(function (error) {
                            console.log(error);
                        });
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消'
                    });
                });
            },
            handleChange(value){
                console.log(value);
            },
            handleTeacherChange(value){
                console.log(value);
            },
            handleOtherChange(value){
                console.log(value);
            },
            //班级级联
            handleChangemove(value) {
                console.log(value);
                this.moveArr = value;

            },
            equipEdit(row){
                console.log(row);
                let self = this;
                self.rowItem = row;
                self.equipmentForm.equipBrand = row.brand.toString();
                self.equipmentForm.equipNo = row.SN;
                self.equipmentForm.stallName = row.stallName;
                self.equipmentVisible = true;

            },
            //转移
            move(){
                let self = this;
                self.moveVisible = true;
                self.axios.get('api/Cashier/MoveDeviceInfo', {
                    params: {
                        stallid:self.moveArr[2],
                        deviceid:self.deviceid
                    }
                })
                    .then(function (response) {
                        if(response.data.code == '000000'){
                            self.$message({
                                showClose: true,
                                message: response.data.msg,
                                type: 'success'
                            });
                            self.moveVisible = false;
                            self.tableList();
                        }else {
                            self.$message({
                                showClose: true,
                                message: response.data.msg,
                                type: 'warning'
                            });
                        }
                    })
                    .catch(function (error) {
                        console.log(error);
                    });
            },
            //添加食堂按钮
            addHall(){
                let self = this;
                if(self.nodeData!= '' && self.nodeData.treeLever == 0){
                    self.hallForm.name='',
                    self.hallForm.description='',
                    self.canteenVisible = true;
                    self.flagHall=true;

                }else{
                    self.$message({
                        showClose: true,
                        message:'请选中学校',
                        type: 'warning'
                    });
                }

            },
            filterNode(value, data) {
                if (!value) return true;
                return data.label.indexOf(value) !== -1;
            }
        },

    }
</script>

<style scoped>
    .tree_data{
        overflow: scroll;
    }
    .tree_data::-webkit-scrollbar {display:none;}

    .table-box{
        overflow: scroll;
    }
    .table-box::-webkit-scrollbar {display:none;}
</style>