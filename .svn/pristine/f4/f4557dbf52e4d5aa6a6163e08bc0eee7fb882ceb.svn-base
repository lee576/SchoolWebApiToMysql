<template>
    <div class="home" v-loading="loading">
        <div class="nav-lead clearfix">
            <div class="fl nav-lead-word"><a href="#">成绩管理</a></div>
            <div class="fr batch-operation">
                <a href="#" class="operation-btn" @click="exportVisible=true">导出成绩单</a>
            </div>
            <div class="fr batch-operation" style="margin-right: 13px">
                <a href="#" class="operation-btn" @click="dialogVisible=true">导入成绩单</a>
            </div>
        </div>
        <div class="page-content">
            <div class="row">
                <div class="col-xs-12 col-sm-12">
                    <div class="nav-tab clearfix">
                        <ul class="nav-tab-change1 fl">
                            <li :class="{active:isShowGraph}" @click="isShowGraph=true">
                                <label class="fl view-img1"></label>
                                <span class="fl">视图</span>
                            </li>
                            <li :class="{active:!isShowGraph}" @click="isShowGraph=false">
                                <label class="fl view-img2"></label>
                                <span class="fl">树状图</span>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
            <ul class="view-tree-box">
                <!--视图-->
                <li class="ym-view-box" :style="{display:isShowGraph?'block':'none'}">
                    <el-row :gutter="10">
                        <el-col :xs="24" :sm="24" :md="24" :lg="10" :xl="10">
                            <div class="card-box">
                                <div style="padding: 10px 50px;margin-top: 18px">
                                    <span style="margin-right: 20px">考试学期</span>
                                    <el-select v-model="semester" placeholder="请选择学期">
                                        <el-option
                                                v-for="item in semestersdata"
                                                :key="item.name"
                                                :label="item.name"
                                                :value="item.name">
                                        </el-option>
                                    </el-select>
                                    <span> <button class="btn-pro" @click="ViewSearch"
                                                   style="margin-left: 10px;width: 7rem">搜索</button></span>
                                </div>
                                <div style="padding: 10px 50px">
                                    <span style="margin-right: 20px">考试科目</span>
                                    <el-select v-model="subject" placeholder="请选择学科"
                                               style="width: 320px">
                                        <el-option
                                                v-for="item in subjectsdata"
                                                :key="item.name"
                                                :label="item.name"
                                                :value="item.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div style="padding: 5px 50px">
                                    <span style="margin-right: 20px">学院班级</span>
                                    <el-cascader
                                            placeholder="请选择班级"
                                            :change-on-select="true"
                                            :options="moveData"
                                            v-model="moveOptions"
                                            :props="props"
                                            style="width: 320px">
                                    </el-cascader>
                                </div>
                            </div>
                        </el-col>
                        <el-col :xs="24" :sm="24" :md="24" :lg="14" :xl="14">
                            <div class="card-box">
                                <div class="card-pad clearfix">
                                    <div class="left-card-num fl">
                                        <div>考试人数</div>
                                        <div class="fa-card">{{performance.totle}}</div>
                                    </div>
                                    <div class="right-card-num fl">
                                        <el-progress :text-inside="true" :stroke-width="30"
                                                     :percentage=performance.percentage
                                        ></el-progress>
                                        <div class="card-num-totel clearfix">
                                            <div class="fl">
                                                及格人数 <span
                                                    class="has-card-num">{{performance.jgcount}}</span>
                                            </div>
                                            <div class="fr">
                                                不及格人数 <span class="no-card-num">{{performance.bjgcount}}</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </el-col>
                    </el-row>
                    <el-row :gutter="10">
                        <el-col :xs="14" :sm="14" :md="14" :lg="14" :xl="14">
                            <div class="ym-body">
                                <div class="ym-body-title">成绩分布</div>
                                <div id="barGraph" style=" height:420px;"></div>
                            </div>
                        </el-col>
                        <el-col :xs="10" :sm="10" :md="10" :lg="10" :xl="10">
                            <div class="ym-body" style="position: relative">
                                <div class="ym-body-title">人员分布</div>
                                <div id="barCharts" style="height:420px;"></div>
                            </div>
                        </el-col>
                    </el-row>
                </li>
                <!--树状图-->
                <li class="ym-tree-box" :style="{display:isShowGraph?'none':'block'}">
                    <div class="two-part-box">
                        <div class="one-part-tree">
                            <div class="ztree-icon" style="margin-top: 0;margin-bottom: 8px"></div>
                            <div class="tree_data" style="border: 1px solid #ddd;">
                                <el-tree :data="dataArr" :props="defaultProps" @node-click="handleNodeClick"
                                         accordion node-key="id" :default-expanded-keys="opentreearr"
                                         style="border: none"></el-tree>
                            </div>
                        </div>
                        <div class="one-part-table">
                            <div class="one-row clearfix">
                                <div class="fl">
                                    <el-select v-model="subject" placeholder="请选择学科"
                                               style="width: 280px;margin-top: 5px">
                                        <el-option
                                                v-for="item in subjectsdata"
                                                :key="item.name"
                                                :label="item.name"
                                                :value="item.name">
                                        </el-option>
                                    </el-select>
                                </div>
                                <div class="fl">
                                    <span style="margin:0  15px">学院班级</span>
                                    <!--<el-select v-model="classvalue" filterable placeholder="请选择班级" style="width: 37rem">-->
                                    <!--<el-option-->
                                    <!--v-for="classe in classesdata"-->
                                    <!--:key="classe.name"-->
                                    <!--:label="classe.name"-->
                                    <!--:value="classe.name">-->
                                    <!--</el-option>-->
                                    <!--</el-select>-->
                                    <el-cascader
                                            placeholder="请选择班级"
                                            :change-on-select="true"
                                            :options="moveData"
                                            v-model="moveOptions"
                                            :props="props"
                                            style="width: 37rem">
                                    </el-cascader>
                                </div>
                            </div>
                            <div class="one-row clearfix">
                                <div class="fl">
                                    <div class="fl search-word1">是否合格</div>
                                    <div class="fl">
                                        <el-select v-model="qualified" placeholder="请选择"
                                                   style="width: 100px;margin: 0 15px">
                                            <el-option
                                                    v-for="item in qualifieddata"
                                                    :key="item.value"
                                                    :label="item.label"
                                                    :value="item.value">
                                            </el-option>
                                        </el-select>
                                    </div>
                                    <div class="fl">
                                        <span style="margin-right: 20px">考试学期</span>
                                        <el-select v-model="semester" placeholder="请选择学期">
                                            <el-option
                                                    v-for="item in semestersdata"
                                                    :key="item.name"
                                                    :label="item.name"
                                                    :value="item.name">
                                            </el-option>
                                        </el-select>
                                    </div>
                                    <div class="fl search-input" style="margin-left: 20px">
                                        <input type="text"
                                               class="se-input"
                                               placeholder="请输入需要查询的学号或姓名"
                                               v-model="theinput">
                                    </div>
                                    <div class="fr search-button">
                                        <button class="btn-pro" @click="sureTheinput" style="margin-right: 10px">搜索
                                        </button>
                                        <button class="btn-pro" @click="returnTheinput">重置</button>
                                    </div>
                                </div>
                                <span class="fr">
                                     <div @click="OpenDelete" class="add_user_on" style="cursor: pointer;">批量删除</div>
                                </span>
                            </div>
                            <div class="table-box" style="border: none;">
                                <template>
                                    <el-table :data="tableData" stripe style="width: 100%;border: 1px solid #ddd;"
                                              @selection-change="handleSelectionChange">
                                        <el-table-column
                                                type="selection"
                                                width="55">
                                        </el-table-column>
                                        <el-table-column prop="user_name" label="姓名">
                                        </el-table-column>
                                        <el-table-column prop="student_id" label="学号">
                                        </el-table-column>
                                        <el-table-column prop="discipline" label="学科名">
                                        </el-table-column>
                                        <el-table-column prop="examinationTime" label="考试时间" width="110">
                                        </el-table-column>
                                        <el-table-column prop="term" label="学期">
                                        </el-table-column>
                                        <el-table-column prop="grade" label="分数">
                                        </el-table-column>
                                        <el-table-column label="是否合格">
                                            <template slot-scope="scope">
                                                {{ scope.row.isQualified==true ? '合格':'不合格 '}}
                                            </template>
                                        </el-table-column>
                                        <el-table-column label="操作">
                                            <template slot-scope="scope">
                                                <el-button type="text" size="small" class="del-tr-con"
                                                           @click="handleDelete(scope.$index, scope.row)">删除
                                                </el-button>
                                            </template>
                                        </el-table-column>
                                    </el-table>
                                </template>
                            </div>
                            <div class="page-pagination" style="padding: 0;">
                                <el-pagination
                                        @size-change="handleSizeChange"
                                        @current-change="handleCurrentChange"
                                        :current-page="configTable.index"
                                        :page-size="configTable.size"
                                        background
                                        layout="prev, pager, next"
                                        :total="configTable.total">
                                </el-pagination>
                            </div>
                        </div>
                    </div>
                </li>
            </ul>
        </div>

        <!--批量导入-->
        <el-dialog title="批量导入" :visible.sync="dialogVisible" width="600px" top="20vh">
            <div class="gray-import">
                <div class="improt-word1">注意事项：</div>
                <ul class="improt-word2">
                    <li>1、必须按照指定的模板格式才能导入成功。</li>
                    <li>2、如果Excel中数据已存在，则会覆盖原有信息。</li>
                    <li>3、请上传Excel后缀为.xlsx文件。</li>
                </ul>
                <div class="improt-word3">下载模板：<span @click="download">成绩单数据导入示例表</span></div>
            </div>
            <div class="gray-import" style="margin-top:10px;">
                <el-upload
                        class="upload-demo"
                        ref="upload"
                        drag
                        :action=uploadUrl()
                        multiple
                        :headers="uploadData"
                        method="post"
                        :on-success="handleAvatarSuccess"
                        :auto-upload="false"
                >
                    <i class="el-icon-upload"></i>
                    <div class="el-upload__text">将文件拖到此处，或<em>点击上传</em></div>
                </el-upload>
            </div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="dialogVisible = false">取 消</el-button>
                <el-button type="primary" @click="submitUpload" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <!--批量导出-->
        <el-dialog title="批量导出" :visible.sync="exportVisible" width="600px" top="25vh">
            <div class="layer-tip-word">确定导出以下数据？</div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="exportVisible = false">取 消</el-button>
                <el-button type="primary" @click="Export" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>
        <!--批量删除-->
        <el-dialog title="批量删除" :visible.sync="delectVisible" width="600px" top="25vh">
            <div class="layer-tip-word">确定是否删除</div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="delectVisible = false">取 消</el-button>
                <el-button type="primary" @click=Delete class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>


        <!--导入人员错误信息-->
        <el-dialog title="错误人员信息" :visible.sync="errorVisible" width="600px" top="25vh">
            <div class="layer-tip-word">{{errpersonnelmsg}}</div>
            <div class="layer-tip-word" @click="ExportErrData" style="cursor: pointer;color:#1D8FE1">点击下载错误人员信息</div>
            <div slot="footer" class="dialog-footer">
                <el-button @click="errorVisible = false">取 消</el-button>
                <el-button type="primary" @click="errorVisible = false" class="sure-btn">确 定</el-button>
            </div>
        </el-dialog>


    </div>
</template>

<script>
    import {currency} from './../../../util/currency';
    import {getDateType} from './../../../util/getDate';
    // 引入基本模板
    let echarts = require('echarts/lib/echarts');
    // 引入柱状图组件
    require('echarts/lib/chart/bar');
    require("echarts/lib/chart/pie");
    // 引入提示框和title组件
    require('echarts/lib/component/tooltip');
    require('echarts/lib/component/title');
    export default {
        data() {
            return {

                uploadData: {
                    schoolcode: localStorage.schoolcode
                },
                semestersdata: [],//选择学期
                semester: '',//学期
                subjectsdata: [],//选择科目
                subject: '',//选择科目  0.0
                classesdata: [],//班
                value: '',//分数段
                options: [{
                    value: '',
                    label: '0-60'
                }, {
                    value: '0',
                    label: '60-70'
                }, {
                    value: '1',
                    label: '70-80'
                }, {
                    value: '2',
                    label: '80-100'
                }],
                performance: {},//成绩
                dateChoose: true,
                qualifieddata: [{
                    value: '',
                    label: '全部'
                }, {
                    value: '0',
                    label: '合格'
                }, {
                    value: '1',
                    label: '不合格'
                }],
                opentreearr: [""],
                moveDatas: [],//班级联动
                moveData: [],
                moveOptions: [],
                props: {
                    value: 'value',
                    children: 'children',
                    label: 'label',
                },
                errname: "",//树形验证
                addtreeinput: "",//新增内容
                edittreeinput: "",//编辑内容
                deletetreeinput: "",//删除内容
                qualified: '',//是否合格   0.0
                classvalue: '',//班级  0.0
                theinput: '',//输入学号或工号
                valId: [],
                loading: false,
                dialogVisible: false,
                exportVisible: false,
                delectVisible: false,
                errorVisible: false,
                tableData: [{
                    student_id: '',
                    term: '',
                    isQualified: '',
                    grade: '',
                    examinationTime: '',
                    discipline: '',
                }],
                isShowGraph: true,
                dataArr: [],
                configTable: {
                    total: 0,
                    size: 10,
                    index: 1
                },
                defaultProps: {
                    children: 'children',
                    label: 'label'
                },
                errpersonneldata: '',//导入人员失败信息
                errpersonnelmsg: '',//导入人员失败提示
                errdata: [],
            };
        },
        mounted() {
            this.circle()
            this.histogram()
        },

        created() {
            this.GetTreeData()
            this.GetTableData()
            this.GetClassData()
            this.GetPeopleData()
        },
        methods: {
            //获取班级数据
            GetClassData() {
                this.axios.get(`/api/SchoolDepartment/GetSchoolDepartmentCascader`, {
                    params: {
                        schoolcode: localStorage.schoolcode
                    }
                }).then(res => {
                    if (res.data.code == "000000") {
                        this.moveDatas.push(res.data.data)
                        this.moveData = this.TreeData(this.moveDatas);
                    }
                })
            },
            TreeData(data) {
                // 循环遍历json数据
                for (var i = 0; i < data.length; i++) {
                    if (data[i].children.length < 1) {
                        // children若为空数组，则将children设为undefined
                        data[i].children = undefined;
                    } else {
                        // children若不为空数组，则继续 递归调用 本方法
                        this.TreeData(data[i].children);
                    }
                }
                return data;
            },
            //获取及格人数
            GetPeopleData() {
                let arr = ""
                this.moveOptions.map(item => {
                    arr = item
                })
                this.axios.get(`/api/SchoolUserGrade/GetGradeAnalysis`, {
                    params: {
                        schoolcode: localStorage.schoolcode,
                        discipline: this.subject,
                        term: this.semester,
                        class_id: arr,
                    }
                }).then(res => {
                    console.log(res)
                    this.performance = res.data
                    if (this.performance.totle == 0) {
                        this.performance.percentage = parseInt(this.performance.totle)
                    } else {
                        this.performance.percentage = parseInt((this.performance.jgcount / this.performance.totle) * 100)
                    }
                    var myChart = echarts.init(document.getElementById('barCharts'));
                    myChart.setOption({
                        legend: {
                            data: res.data.dataArr,
                        },
                        series: [{
                            data: [{
                                value: res.data.dataGradeCount[0],
                                name: res.data.dataArr[0],
                            }, {
                                value: res.data.dataGradeCount[1],
                                name: res.data.dataArr[1],
                            }, {
                                value: res.data.dataGradeCount[2],
                                name: res.data.dataArr[2],
                            }, {
                                value: res.data.dataGradeCount[3],
                                name: res.data.dataArr[3],
                            },]
                        }]
                    });
                    var myCharts = echarts.init(document.getElementById('barGraph'));
                    myCharts.setOption({
                        xAxis: {
                            data: res.data.dataArr,
                        },
                        series: [{
                            data: res.data.dataGradeCount
                        }]
                    });

                })
            },
            //获取树形数据
            GetTreeData() {
                this.axios.get(`/api/SchoolUserGrade/GetDisciplineTree`, {
                    params: {
                        schoolcode: localStorage.schoolcode
                    }
                }).then(res => {
                    this.dataArr.push(res.data.data)
                    res.data.list.map(item => {
                        this.subjectsdata.push({name: item})
                    })
                    res.data.termlist.map(item => {
                        this.semestersdata.push({name: item})
                    })
                    console.log(res)
                })
            },
            //获取table数据
            GetTableData() {
                let arr = ""
                this.moveOptions.map(item => {
                    arr = item
                })
                this.axios.get(`/api/SchoolUserGrade/GetUserGradeList`, {
                    params: {
                        iDisplayStart: this.configTable.index,
                        iDisplayLength: this.configTable.size,
                        schoolcode: localStorage.schoolcode,
                        discipline: this.subject,
                        class_id: arr,
                        isQualified: this.qualified,
                        selectinfo: this.theinput,
                        term: this.semester,
                    }
                }).then(res => {
                    this.tableData = res.data.data
                    console.log(res)
                })
            },


            //查询按钮
            ViewSearch() {
                this.GetTableData()
                this.GetPeopleData()
            },
            sureTheinput() {
                this.GetTableData()
                this.GetPeopleData()
            },
            //重置按钮
            returnTheinput() {
                this.moveOptions = []
                this.subject = ""
                this.qualified = ""
                this.theinput = ""
                this.semester = ""
                this.GetTableData()
            },
            // 分页
            handleSizeChange(val) {
                this.configTable.size = val
                this.GetTableData()
                console.log(`每页 ${val} 条`);
            },
            handleCurrentChange(val) {
                this.configTable.index = val
                this.GetTableData()
                console.log(`当前页: ${val}`);
            },
            check: function () {
                // if (this.addtreeinput != "") {
                //     this.errname = "";
                // } else {
                //     this.errname = "用户名不能为空";
                // }
            },
            handleDelete(index, row) {
                this.$confirm('是否删除?', '提示', {
                    confirmButtonText: '确定',
                    cancelButtonText: '取消',
                    type: 'warning'
                }).then(() => {
                    this.axios.get(`/api/SchoolUserGrade/DeleteGradeInfo`, {
                        params: {
                            schoolcode: localStorage.schoolcode,
                            ids: row.grade_id
                        }
                    }).then(res => {
                        if (res.data.code == "000000") {
                            this.$message({
                                type: 'success',
                                message: res.data.msg
                            });
                            this.GetTableData()
                            this.GetPeopleData()
                        } else {
                            this.$message.error(res.data.msg);
                        }
                    })
                }).catch(() => {
                    this.$message({
                        type: 'info',
                        message: '已取消删除'
                    });
                });
            },
            //上传地址
            uploadUrl() {
                var url = this.axios.defaults.baseURL + "api/SchoolUserGrade/AddSchoolStudentGradeInfoToExcel";
                return url;
            },
            //点击上传
            submitUpload(res, file) {
                this.loading = true
                this.dialogVisible = false;
                this.$refs.upload.submit();
            },
            //上传成功
            handleAvatarSuccess(res, file) {
                this.loading = false
                if (res.code == "000000") {
                    this.GetTreeData()
                    this.GetTableData()
                    this.GetPeopleData()
                    this.$message({
                        message: res.msg,
                        type: 'success'
                    });
                } else {
                    this.$message.error(res.data);
                }
                console.log(res)
            },
            ExportErrData() {
                require.ensure([], () => {
                    const {export_json_to_excel} = require('../../../assets/js/Export2Excel');
                    const tHeader = ['身份证号'];
                    // 上面设置Excel的表格第一行的标题
                    const filterVal = ['id'];
                    // 上面的index、phone_Num、school_Name是tableData里对象的属性
                    const list = this.errdata;  //把data里的tableData存到list
                    const data = this.formatJson(filterVal, list);
                    export_json_to_excel(tHeader, data, '错误人员信息');
                })
                this.dialogVisible = false
                this.errorVisible = false
            },


            Export() {
                let discipline = "", student_idOrName = "", startTime = "", endTime = ""

                if (this.subject) {
                    discipline = this.subject
                }
                if (this.theinput) {
                    student_idOrName = this.theinput
                }

                window.open(this.axios.defaults.baseURL + 'api/SchoolUserGrade/InduceSchoolUserGradeLIst?schoolCode=' + localStorage.schoolcode + '' +
                    '&discipline=' + discipline + '&student_idOrName=' + student_idOrName + '&startTime=' + startTime + '&endTime=' + endTime);
                this.exportVisible = false
            },
            //点击表格头
            handleSelectionChange(val) {
                val.map(item => {
                    this.valId.push(item.grade_id)
                })
                console.log(val)
            },
            //批量删除
            OpenDelete() {
                this.delectVisible = true
                console.log(this.valId)
            },
            Delete() {
                this.axios.get(`/api/SchoolUserGrade/DeleteGradeInfo`, {
                    params: {
                        schoolcode: localStorage.schoolcode,
                        ids: this.valId.join(",")
                    }
                }).then(res => {
                    if (res.data.code == "000000") {
                        this.delectVisible = false
                        this.GetTableData()
                        this.GetPeopleData()
                        this.$message({
                            type: 'success',
                            message: res.data.msg
                        });
                    } else {
                        this.delectVisible = false
                        this.$message.error(res.data.msg);
                    }
                })
            },
            //树状图
            handleNodeClick(data) {
                console.log(data);
            },

            // 点击下载
            download() {
                window.open(this.platUrl + 'Template/Transcript.xlsx');
            },

            //圆环图
            circle() {
                var myChart = echarts.init(document.getElementById('barCharts'));
                let option = {
                    tooltip: {
                        trigger: 'item',
                        formatter: "{a} <br/>{b}: {c} ({d}%)"
                    },
                    legend: {
                        orient: 'vertical',
                        x: '2%',
                        y: '30%',
                        itemWidth: 25,
                        itemHeight: 25,
                        itemGap: 20,
                        textStyle: {
                            fontSize: 17,//字体大小
                        },
                        data: [],
                    },
                    series: [
                        {
                            type: 'pie',
                            radius: ['50%', '70%'],
                            avoidLabelOverlap: false,
                            label: {
                                normal: {
                                    show: false,
                                    position: 'center'
                                },
                                emphasis: {
                                    show: true,
                                    textStyle: {
                                        fontSize: '30',
                                        fontWeight: 'bold'
                                    }
                                }
                            },
                            labelLine: {
                                normal: {
                                    show: false
                                }
                            },
                            data: [
                                {value: '', name: '',},
                            ],
                            itemStyle: {
                                normal: {
                                    color: function (params) {
                                        var colorList = ['#2387FB', '#23FB9D', '#FBDE23', '#FF6767'];
                                        return colorList[params.dataIndex];
                                    }
                                }
                            }
                        }
                    ]
                };
                myChart.setOption(option);
            },
            //折线状图
            histogram() {
                var myCharts = echarts.init(document.getElementById('barGraph'));

                // 指定图表的配置项和数据
                var option = {
                    tooltip: {
                        trigger: 'axis'
                    },
                    xAxis: {
                        type: 'category',
                        data: []
                    },
                    yAxis: {
                        type: 'value'
                    },
                    series: [{
                        data: [],
                        type: 'line',
                        stack: '总量',
                        smooth: true
                    }]
                };


                // 使用刚指定的配置项和数据显示图表。
                myCharts.setOption(option);

            },
        },
    }
</script>

<style scoped>
    .tree_data {
        overflow: scroll
    }

    .tree_data::-webkit-scrollbar {
        display: none
    }

    .table-box {
        overflow: scroll
    }

    .table-box::-webkit-scrollbar {
        display: none
    }
</style>